#!/bin/bash
# Health Platform Deployment Script
# Generated by Zhuang

set -e

# Configuration
NAMESPACE="health-platform"
REGISTRY="ghcr.io/devnextx"
BACKEND_IMAGE="${REGISTRY}/health-platform-backend:latest"
FRONTEND_IMAGE="${REGISTRY}/health-platform-frontend:latest"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    if ! command -v kubectl &> /dev/null; then
        print_error "kubectl is not installed or not in PATH"
    fi
    
    if ! command -v docker &> /dev/null; then
        print_error "docker is not installed or not in PATH"
    fi
    
    if ! kubectl cluster-info &> /dev/null; then
        print_error "Cannot connect to Kubernetes cluster"
    fi
    
    print_success "Prerequisites check passed"
}

# Build and push images
build_and_push() {
    print_status "Building and pushing Docker images..."
    
    # Build backend
    print_status "Building backend image..."
    docker build -f Dockerfile.backend -t health-platform-backend:latest .
    docker tag health-platform-backend:latest $BACKEND_IMAGE
    
    # Build frontend
    print_status "Building frontend image..."
    docker build -f Dockerfile.frontend -t health-platform-frontend:latest .
    docker tag health-platform-frontend:latest $FRONTEND_IMAGE
    
    # Push images
    print_status "Pushing images to registry..."
    docker push $BACKEND_IMAGE
    docker push $FRONTEND_IMAGE
    
    print_success "Images built and pushed successfully"
}

# Create namespace and secrets
setup_namespace() {
    print_status "Setting up namespace and secrets..."
    
    # Create namespace
    kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    
    # Check if secrets exist
    if ! kubectl get secret regcred -n $NAMESPACE &> /dev/null; then
        print_warning "Image pull secret 'regcred' not found. Please create it manually if using private registry:"
        echo "kubectl create secret docker-registry regcred --docker-server=ghcr.io --docker-username=YOUR_USERNAME --docker-password=YOUR_TOKEN -n $NAMESPACE"
    fi
    
    if ! kubectl get secret backend-secrets -n $NAMESPACE &> /dev/null; then
        print_warning "Backend secrets not found. Creating with default values..."
        kubectl create secret generic backend-secrets \
            --from-literal=JWT_SECRET='change-me-in-production' \
            --from-literal=DATABASE_URL='sqlite:///instance/health_platform.db' \
            -n $NAMESPACE
        print_warning "Please update the JWT_SECRET and DATABASE_URL in the backend-secrets secret"
    fi
    
    print_success "Namespace and secrets configured"
}

# Deploy backend
deploy_backend() {
    print_status "Deploying backend..."
    kubectl apply -f deploy/k8s-optimized-backend.yaml
    
    # Wait for backend deployment
    print_status "Waiting for backend to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/backend -n $NAMESPACE
    
    print_success "Backend deployed successfully"
}

# Deploy frontend
deploy_frontend() {
    print_status "Deploying frontend..."
    kubectl apply -f deploy/k8s-optimized-frontend.yaml
    
    # Wait for frontend deployment
    print_status "Waiting for frontend to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/frontend -n $NAMESPACE
    
    print_success "Frontend deployed successfully"
}

# Display deployment info
show_info() {
    print_status "Deployment Information:"
    echo
    
    print_status "Pods:"
    kubectl get pods -n $NAMESPACE
    echo
    
    print_status "Services:"
    kubectl get svc -n $NAMESPACE
    echo
    
    print_status "HPA:"
    kubectl get hpa -n $NAMESPACE 2>/dev/null || echo "No HPA found"
    echo
    
    print_status "Getting external IPs (this may take a few minutes)..."
    BACKEND_IP=$(kubectl get svc backend-external -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pending")
    FRONTEND_IP=$(kubectl get svc frontend-svc -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pending")
    
    echo
    print_success "Deployment completed!"
    echo "Frontend URL: http://${FRONTEND_IP}:80 (when IP becomes available)"
    echo "Backend URL: http://${BACKEND_IP}:5000 (when IP becomes available)"
    echo
    print_status "Monitor external IP assignment with:"
    echo "kubectl get svc -n $NAMESPACE -w"
}

# Main deployment function
main() {
    echo "=== Health Platform Kubernetes Deployment ==="
    echo
    
    # Parse command line options
    BUILD=false
    SKIP_BUILD=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --build)
                BUILD=true
                shift
                ;;
            --skip-build)
                SKIP_BUILD=true
                shift
                ;;
            --help)
                echo "Usage: $0 [OPTIONS]"
                echo "Options:"
                echo "  --build       Build and push Docker images"
                echo "  --skip-build  Skip image building (use existing images)"
                echo "  --help        Show this help message"
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                ;;
        esac
    done
    
    check_prerequisites
    
    if [[ "$BUILD" == "true" ]]; then
        build_and_push
    elif [[ "$SKIP_BUILD" == "false" ]]; then
        read -p "Do you want to build and push Docker images? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            build_and_push
        fi
    fi
    
    setup_namespace
    deploy_backend
    deploy_frontend
    show_info
}

# Run main function
main "$@"
