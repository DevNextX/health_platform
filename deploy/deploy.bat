@echo off
REM Health Platform Deployment Script for Windows
REM Generated by Zhuang

setlocal EnableDelayedExpansion

REM Configuration
set NAMESPACE=health-platform
set REGISTRY=ghcr.io/devnextx
set BACKEND_IMAGE=%REGISTRY%/health-platform-backend:latest
set FRONTEND_IMAGE=%REGISTRY%/health-platform-frontend:latest

REM Check prerequisites
echo [INFO] Checking prerequisites...

where kubectl >nul 2>nul
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] kubectl is not installed or not in PATH
    exit /b 1
)

where docker >nul 2>nul
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] docker is not installed or not in PATH
    exit /b 1
)

kubectl cluster-info >nul 2>nul
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] Cannot connect to Kubernetes cluster
    exit /b 1
)

echo [SUCCESS] Prerequisites check passed

REM Check for build flag
set BUILD_IMAGES=false
set SKIP_BUILD=false

:parse_args
if "%~1"=="--build" (
    set BUILD_IMAGES=true
    shift
    goto parse_args
)
if "%~1"=="--skip-build" (
    set SKIP_BUILD=true
    shift
    goto parse_args
)
if "%~1"=="--help" (
    echo Usage: %0 [OPTIONS]
    echo Options:
    echo   --build       Build and push Docker images
    echo   --skip-build  Skip image building ^(use existing images^)
    echo   --help        Show this help message
    exit /b 0
)
if "%~1" NEQ "" (
    echo [ERROR] Unknown option: %~1
    exit /b 1
)

REM Build and push images if requested
if "%BUILD_IMAGES%"=="true" (
    goto build_images
) else if "%SKIP_BUILD%"=="false" (
    set /p choice="Do you want to build and push Docker images? (y/N): "
    if /i "!choice!"=="y" goto build_images
)
goto setup_namespace

:build_images
echo [INFO] Building and pushing Docker images...

echo [INFO] Building backend image...
docker build -f Dockerfile.backend -t health-platform-backend:latest .
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] Failed to build backend image
    exit /b 1
)

docker tag health-platform-backend:latest %BACKEND_IMAGE%
docker push %BACKEND_IMAGE%
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] Failed to push backend image
    exit /b 1
)

echo [INFO] Building frontend image...
docker build -f Dockerfile.frontend -t health-platform-frontend:latest .
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] Failed to build frontend image
    exit /b 1
)

docker tag health-platform-frontend:latest %FRONTEND_IMAGE%
docker push %FRONTEND_IMAGE%
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] Failed to push frontend image
    exit /b 1
)

echo [SUCCESS] Images built and pushed successfully

:setup_namespace
echo [INFO] Setting up namespace and secrets...

REM Create namespace
kubectl create namespace %NAMESPACE% --dry-run=client -o yaml | kubectl apply -f -

REM Check if secrets exist
kubectl get secret regcred -n %NAMESPACE% >nul 2>nul
if %ERRORLEVEL% NEQ 0 (
    echo [WARNING] Image pull secret 'regcred' not found. Please create it manually if using private registry:
    echo kubectl create secret docker-registry regcred --docker-server=ghcr.io --docker-username=YOUR_USERNAME --docker-password=YOUR_TOKEN -n %NAMESPACE%
)

kubectl get secret backend-secrets -n %NAMESPACE% >nul 2>nul
if %ERRORLEVEL% NEQ 0 (
    echo [WARNING] Backend secrets not found. Creating with default values...
    kubectl create secret generic backend-secrets --from-literal=JWT_SECRET=change-me-in-production --from-literal=DATABASE_URL="sqlite:///instance/health_platform.db" -n %NAMESPACE%
    echo [WARNING] Please update the JWT_SECRET and DATABASE_URL in the backend-secrets secret
)

echo [SUCCESS] Namespace and secrets configured

REM Deploy backend
echo [INFO] Deploying backend...
kubectl apply -f deploy/k8s-optimized-backend.yaml
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] Failed to deploy backend
    exit /b 1
)

echo [INFO] Waiting for backend to be ready...
kubectl wait --for=condition=available --timeout=300s deployment/backend -n %NAMESPACE%
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] Backend deployment timed out
    exit /b 1
)

echo [SUCCESS] Backend deployed successfully

REM Deploy frontend
echo [INFO] Deploying frontend...
kubectl apply -f deploy/k8s-optimized-frontend.yaml
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] Failed to deploy frontend
    exit /b 1
)

echo [INFO] Waiting for frontend to be ready...
kubectl wait --for=condition=available --timeout=300s deployment/frontend -n %NAMESPACE%
if %ERRORLEVEL% NEQ 0 (
    echo [ERROR] Frontend deployment timed out
    exit /b 1
)

echo [SUCCESS] Frontend deployed successfully

REM Display deployment info
echo [INFO] Deployment Information:
echo.

echo [INFO] Pods:
kubectl get pods -n %NAMESPACE%
echo.

echo [INFO] Services:
kubectl get svc -n %NAMESPACE%
echo.

echo [INFO] HPA:
kubectl get hpa -n %NAMESPACE% 2>nul || echo No HPA found
echo.

echo [SUCCESS] Deployment completed!
echo Frontend and Backend services are being provisioned with external IPs...
echo Monitor external IP assignment with:
echo kubectl get svc -n %NAMESPACE% -w

pause
