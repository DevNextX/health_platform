#!/bin/bash
# Deployment Configuration Validator
# Generated by Zhuang

set -e

ENVIRONMENT=${1:-dev}
CONFIG_FILE="deploy/config/${ENVIRONMENT}.env"

echo "🔍 Validating deployment configuration for ${ENVIRONMENT} environment..."

# Check if config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "❌ Config file $CONFIG_FILE not found!"
    echo "Available environments:"
    ls deploy/config/*.env 2>/dev/null | xargs -n 1 basename | sed 's/.env$//' || echo "No config files found"
    exit 1
fi

# Load environment variables
echo "📋 Loading configuration from $CONFIG_FILE..."
source $CONFIG_FILE

# Required variables check
required_vars=("NAMESPACE" "IMAGE_TAG" "REGISTRY_URL" "SERVICE_TYPE")
missing_vars=()

for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        missing_vars+=("$var")
    else
        echo "✅ $var = ${!var}"
    fi
done

if [ ${#missing_vars[@]} -gt 0 ]; then
    echo "❌ Missing required variables: ${missing_vars[*]}"
    exit 1
fi

# Security check - ensure no sensitive info in config
echo ""
echo "🔒 Security validation..."
if grep -i "password\|secret\|key\|token" $CONFIG_FILE > /dev/null; then
    echo "⚠️  Warning: Potential sensitive information found in $CONFIG_FILE"
    echo "💡 Move sensitive data to GitHub Secrets"
fi

# Check for hardcoded domains/IPs
if grep -E "CORS_ORIGINS.*http" $CONFIG_FILE > /dev/null; then
    echo "⚠️  Warning: Hardcoded CORS origins found"
    echo "💡 CORS origins should be configured dynamically"
fi

echo "✅ Security validation passed"

# Kubernetes cluster validation
echo ""
echo "🔍 Validating Kubernetes cluster access..."

# Note: KUBE_CONFIG_PATH and KUBE_CONTEXT should come from environment or GitHub Secrets
# Configure kubectl if specified via environment variables (not from config file for security)
if [ -n "$KUBE_CONFIG_PATH" ]; then
    echo "📋 Using custom kubeconfig: $KUBE_CONFIG_PATH"
    export KUBECONFIG=$KUBE_CONFIG_PATH
fi

if [ -n "$KUBE_CONTEXT" ]; then
    echo "📋 Using kubectl context: $KUBE_CONTEXT"
    kubectl config use-context $KUBE_CONTEXT
fi

# Test cluster access
kubectl cluster-info --request-timeout=10s || {
    echo "❌ Cannot access Kubernetes cluster"
    echo "💡 Troubleshooting tips:"
    echo "   - Check your kubeconfig file"
    echo "   - Verify KUBE_CONTEXT is correct"
    echo "   - Ensure cluster is reachable"
    exit 1
}

# Check namespace access
echo "🔍 Checking namespace access..."
kubectl auth can-i create deployments --namespace=$NAMESPACE || {
    echo "⚠️  Warning: May not have deployment permissions in namespace $NAMESPACE"
}

# Validate template file
echo ""
echo "🔍 Validating template file..."
TEMPLATE_FILE="deploy/k8s-template.yaml"
if [ ! -f "$TEMPLATE_FILE" ]; then
    echo "❌ Template file $TEMPLATE_FILE not found!"
    exit 1
fi

# Test template substitution
echo "📝 Testing template substitution..."
OUTPUT_FILE="/tmp/k8s-${ENVIRONMENT}-test.yaml"
envsubst < $TEMPLATE_FILE > $OUTPUT_FILE

# Validate generated YAML
kubectl apply --dry-run=client -f $OUTPUT_FILE || {
    echo "❌ Generated YAML validation failed"
    exit 1
}

echo "✅ Template generates valid Kubernetes YAML"
rm -f $OUTPUT_FILE

echo ""
echo "🎉 All validation checks passed!"
echo "💡 Ready to deploy with: ./deploy/deploy-configurable.sh ${ENVIRONMENT}"
