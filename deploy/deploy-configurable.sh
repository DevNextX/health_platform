#!/bin/bash
# Health Platform Configurable Deployment Script
# Generated by Zhuang

set -e

# Default values
ENVIRONMENT=${1:-dev}
CONFIG_FILE="deploy/config/${ENVIRONMENT}.env"
TEMPLATE_FILE="deploy/k8s-template.yaml"
OUTPUT_FILE="deploy/k8s-${ENVIRONMENT}.yaml"

echo "üöÄ Deploying Health Platform to ${ENVIRONMENT} environment..."

# Check if config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "‚ùå Config file $CONFIG_FILE not found!"
    echo "Available environments:"
    ls deploy/config/*.env 2>/dev/null | xargs -n 1 basename | sed 's/.env$//' || echo "No config files found"
    exit 1
fi

# Load environment variables
echo "üìã Loading configuration from $CONFIG_FILE..."
export $(grep -v '^#' $CONFIG_FILE | xargs)

# Set dynamic CORS origins based on service type and environment
if [ -z "$CORS_ORIGINS" ]; then
    case $ENVIRONMENT in
        "dev")
            export CORS_ORIGINS="http://localhost:3000,http://127.0.0.1:3000"
            ;;
        "staging")
            # Will be updated after service deployment
            export CORS_ORIGINS="http://localhost:3000"
            ;;
        "prod")
            # Will be updated after service deployment  
            export CORS_ORIGINS=""
            ;;
        *)
            export CORS_ORIGINS="http://localhost:3000"
            ;;
    esac
fi

# Validate required variables
required_vars=("NAMESPACE" "IMAGE_TAG" "REGISTRY_URL" "SERVICE_TYPE")
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo "‚ùå Required variable $var is not set in $CONFIG_FILE"
        exit 1
    fi
done

# Configure kubectl context if specified
if [ -n "$KUBE_CONFIG_PATH" ]; then
    echo "üìã Using custom kubeconfig: $KUBE_CONFIG_PATH"
    export KUBECONFIG=$KUBE_CONFIG_PATH
fi

if [ -n "$KUBE_CONTEXT" ]; then
    echo "üìã Switching to kubectl context: $KUBE_CONTEXT"
    kubectl config use-context $KUBE_CONTEXT
fi

# Verify cluster access
echo "üìã Verifying cluster access..."
kubectl cluster-info --request-timeout=10s || {
    echo "‚ùå Cannot access Kubernetes cluster. Please check your kubeconfig and context."
    exit 1
}

# Generate Kubernetes manifests from template
echo "üìù Generating Kubernetes manifests..."
envsubst < $TEMPLATE_FILE > $OUTPUT_FILE

echo "‚úÖ Generated manifests: $OUTPUT_FILE"

# Apply to Kubernetes cluster
if [ "${APPLY_NOW:-true}" = "true" ]; then
    echo "üéØ Applying to Kubernetes cluster..."
    
    # Create namespace if it doesn't exist
    kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    
    # Apply the manifests
    kubectl apply -f $OUTPUT_FILE
    
    echo "‚è≥ Waiting for deployments to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/backend -n $NAMESPACE
    kubectl wait --for=condition=available --timeout=300s deployment/frontend -n $NAMESPACE
    
    echo "üéâ Deployment completed successfully!"
    echo "üìä Getting deployment status..."
    kubectl get pods,svc -n $NAMESPACE
    
    # Get service external IP if LoadBalancer
    if [ "$SERVICE_TYPE" = "LoadBalancer" ]; then
        echo "üåê Getting external access information..."
        EXTERNAL_IP=$(kubectl get svc frontend-svc -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
        
        if [ -n "$EXTERNAL_IP" ]; then
            echo "External IP: $EXTERNAL_IP"
            
            # Update CORS origins with actual external IP
            if [ "$ENVIRONMENT" != "dev" ]; then
                echo "üîß Updating CORS configuration with external IP..."
                NEW_CORS_ORIGINS="http://${EXTERNAL_IP},https://${EXTERNAL_IP}"
                if [ "$ENVIRONMENT" = "staging" ]; then
                    NEW_CORS_ORIGINS="${NEW_CORS_ORIGINS},http://localhost:3000"
                fi
                
                # Update backend config with new CORS origins
                kubectl patch configmap backend-config -n $NAMESPACE --type merge -p "{\"data\":{\"CORS_ORIGINS\":\"$NEW_CORS_ORIGINS\"}}"
                
                # Restart backend to pick up new configuration
                echo "üîÑ Restarting backend to apply new CORS configuration..."
                kubectl rollout restart deployment/backend -n $NAMESPACE
                
                echo "‚úÖ CORS updated to: $NEW_CORS_ORIGINS"
            fi
        else
            echo "‚è≥ External IP not yet assigned, CORS configuration will use defaults"
        fi
    fi
else
    echo "‚ÑπÔ∏è  Manifests generated but not applied. Use 'kubectl apply -f $OUTPUT_FILE' to deploy."
fi
