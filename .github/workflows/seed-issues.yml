name: Seed Issues from CSV

# Generated by Zhuang

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    paths:
      - ".github/seed/issues.csv"

permissions:
  issues: write
  contents: read

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create labels and issues from CSV (standard library only)
        shell: bash
        run: |
          python3 - <<'PY'
          # Generated by Zhuang
          import csv, os, json
          from urllib.parse import quote
          from urllib.request import Request, urlopen
          from urllib.error import HTTPError

          repo = os.environ['GITHUB_REPOSITORY']
          token = os.environ['GITHUB_TOKEN']
          base = f"https://api.github.com/repos/{repo}"

          def req(method, url, data=None):
            headers = {
              'Authorization': f'Bearer {token}',
              'Accept': 'application/vnd.github+json',
              'Content-Type': 'application/json'
            }
            body = json.dumps(data).encode('utf-8') if data is not None else None
            r = Request(url, data=body, headers=headers, method=method)
            with urlopen(r) as resp:
              return resp.read()

          # 1) Collect labels from CSV
          labels_set = set()
          rows = []
          with open('.github/seed/issues.csv', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
              rows.append(row)
              labels = [l.strip() for l in row['labels'].split(',') if l.strip()]
              labels_set.update(labels)

          # 2) Ensure labels exist
          for name in labels_set:
            if not name:
              continue
            try:
              req('GET', f"{base}/labels/{quote(name)}")
            except HTTPError as e:
              if e.code == 404:
                # Create label with a default color
                req('POST', f"{base}/labels", { 'name': name, 'color': 'ededed' })
              else:
                raise

          # 3) Create issues
          for row in rows:
            title = row['title']
            body = row['body']
            labels = [l.strip() for l in row['labels'].split(',') if l.strip()]
            req('POST', f"{base}/issues", { 'title': title, 'body': body, 'labels': labels })
          PY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
