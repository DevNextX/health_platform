# CI/CD workflow to build, push Docker images and deploy to Kubernetes
# Generated by Zhuang

name: Build, Push and Deploy

on:
  push:
    branches:
      - main
      - 'MVP*'
      - MVP2.0-GPT5
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      deploy:
        description: 'Deploy to Kubernetes'
        required: true
        default: true
        type: boolean

permissions:
  contents: read
  packages: write

concurrency:
  group: docker-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta_backend.outputs.tags }}
      image_digest: ${{ steps.build_backend.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend metadata (tags/labels)
      - name: Extract backend image metadata
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/health-platform-backend
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=mvp,enable=${{ startsWith(github.ref_name, 'MVP') }}

      - name: Convert tags to lowercase
        id: backend_tags_lower
        run: |
          TAGS="${{ steps.meta_backend.outputs.tags }}"
          LOWERCASE_TAGS=$(echo "$TAGS" | tr '[:upper:]' '[:lower:]')
          # Handle multi-line tags properly
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$LOWERCASE_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.backend
          push: true
          tags: ${{ steps.backend_tags_lower.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}

      # Frontend metadata (tags/labels)
      - name: Extract frontend image metadata
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/health-platform-frontend
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=mvp,enable=${{ startsWith(github.ref_name, 'MVP') }}

      - name: Convert frontend tags to lowercase
        id: frontend_tags_lower
        run: |
          TAGS="${{ steps.meta_frontend.outputs.tags }}"
          LOWERCASE_TAGS=$(echo "$TAGS" | tr '[:upper:]' '[:lower:]')
          # Handle multi-line tags properly
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$LOWERCASE_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        id: build_frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.frontend.nonroot
          push: true
          tags: ${{ steps.frontend_tags_lower.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/MVP') || github.event.inputs.deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set deployment environment
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Setup kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          context: ${{ secrets.KUBE_CONTEXT }}

      - name: Install envsubst
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Deploy to Kubernetes
        env:
          KUBE_CONTEXT: ${{ secrets.KUBE_CONTEXT }}
          KUBE_CONFIG_PATH: ""  # Using kubeconfig from setup step above
        run: |
          # Set environment variables for template substitution
          export ENVIRONMENT=${{ steps.env.outputs.environment }}
          
          # Load environment config
          source deploy/config/${ENVIRONMENT}.env
          
          # Override IMAGE_TAG with the built image tag
          export IMAGE_TAG=sha-${{ github.sha }}
          
          # Override cluster configuration from secrets (more secure)
          if [ -n "$KUBE_CONTEXT" ]; then
            echo "üìã Using kubectl context from secrets: $KUBE_CONTEXT"
            kubectl config use-context $KUBE_CONTEXT
          fi
          
          echo "üöÄ Deploying to ${ENVIRONMENT} environment with image tag ${IMAGE_TAG}"
          
          # Generate manifests from template
          envsubst < deploy/k8s-template.yaml > deploy/k8s-${ENVIRONMENT}-generated.yaml
          
          # Create namespace if it doesn't exist
          kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply the manifests
          kubectl apply -f deploy/k8s-${ENVIRONMENT}-generated.yaml
          
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/backend -n ${NAMESPACE}
          kubectl wait --for=condition=available --timeout=300s deployment/frontend -n ${NAMESPACE}
          
          echo "‚úÖ Deployment completed successfully!"
          kubectl get pods,svc -n ${NAMESPACE}

      - name: Get service status
        run: |
          source deploy/config/${{ steps.env.outputs.environment }}.env
          echo "üåê Service information:"
          kubectl get svc -n ${NAMESPACE}
          
          if [ "$SERVICE_TYPE" = "LoadBalancer" ]; then
            echo "‚è≥ Waiting for LoadBalancer IP..."
            kubectl get svc frontend-svc -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "IP not yet assigned"
          fi
