# CI/CD workflow to build, push Docker images and deploy to Kubernetes
# Generated by Zhuang

name: Build, Push and Deploy

on:
  push:
    branches:
      - main
      - 'MVP*'
      - MVP2.0-GPT5
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - production
      skip_build:
        description: 'Skip build and only deploy existing images'
        required: false
        default: false
        type: boolean
      deploy:
        description: 'Deploy to Kubernetes'
        required: true
        default: true
        type: boolean

permissions:
  contents: read
  packages: write

concurrency:
  group: docker-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_build != 'true'
    outputs:
      image_tag: ${{ steps.meta_backend.outputs.tags }}
      image_digest: ${{ steps.build_backend.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend metadata (tags/labels)
      - name: Extract backend image metadata
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/health-platform-backend
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=mvp,enable=${{ startsWith(github.ref_name, 'MVP') }}

      - name: Convert tags to lowercase
        id: backend_tags_lower
        run: |
          TAGS="${{ steps.meta_backend.outputs.tags }}"
          LOWERCASE_TAGS=$(echo "$TAGS" | tr '[:upper:]' '[:lower:]')
          # Handle multi-line tags properly
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$LOWERCASE_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.backend
          push: true
          tags: ${{ steps.backend_tags_lower.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}

      # Frontend metadata (tags/labels)
      - name: Extract frontend image metadata
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/health-platform-frontend
          flavor: |
            latest=auto
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=mvp,enable=${{ startsWith(github.ref_name, 'MVP') }}

      - name: Convert frontend tags to lowercase
        id: frontend_tags_lower
        run: |
          TAGS="${{ steps.meta_frontend.outputs.tags }}"
          LOWERCASE_TAGS=$(echo "$TAGS" | tr '[:upper:]' '[:lower:]')
          # Handle multi-line tags properly
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$LOWERCASE_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        id: build_frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.frontend.nonroot
          push: true
          tags: ${{ steps.frontend_tags_lower.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always() && (needs.build-and-push.result == 'success' || github.event.inputs.skip_build == 'true') && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/MVP') || github.event.inputs.deploy == 'true')
    # Use GitHub Environment for secrets and protection rules
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set deployment environment
        id: env
        run: |
          echo "üîç Debugging environment selection:"
          echo "Branch: ${{ github.ref }}"
          echo "Manual input: ${{ github.event.inputs.environment }}"
          echo "Skip build: ${{ github.event.inputs.skip_build }}"
          
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "üìã Using manual environment selection: ${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "üìã Using production for main branch"
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "üìã Using development for feature/MVP branches"
          fi
          
          echo "‚úÖ Environment set to: $(cat $GITHUB_OUTPUT | grep environment | cut -d'=' -f2)"

      - name: Setup kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          context: ${{ secrets.KUBE_CONTEXT }}

      - name: Install envsubst
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Deploy to Kubernetes
        env:
          KUBE_CONTEXT: ${{ secrets.KUBE_CONTEXT }}
          KUBE_CONFIG_PATH: ""  # Using kubeconfig from setup step above
        run: |
          # Set environment variables for template substitution
          export ENVIRONMENT=${{ steps.env.outputs.environment }}

          # Ensure env file exists, normalize line endings and export all variables
          ENV_FILE=deploy/config/${ENVIRONMENT}.env
          if [ ! -f "$ENV_FILE" ]; then
            echo "‚ùå Missing environment config file: $ENV_FILE"
            ls -la deploy/config || true
            exit 1
          fi
          # Normalize CRLF and export variables from the file
          sed -i 's/\r$//' "$ENV_FILE"
          set -a
          # shellcheck disable=SC1090
          source "$ENV_FILE"
          set +a

          # Validate required vars are present
          : "${NAMESPACE:?NAMESPACE must be set in $ENV_FILE}"
          : "${REGISTRY_URL:?REGISTRY_URL must be set in $ENV_FILE}"
          : "${BACKEND_REPLICAS:?BACKEND_REPLICAS must be set in $ENV_FILE}"
          : "${FRONTEND_REPLICAS:?FRONTEND_REPLICAS must be set in $ENV_FILE}"

          # IMAGE_TAG selection and validation (allow only safe chars)
          if printf '%s' "${{ vars.IMAGE_TAG }}" | grep -Eq '^[a-zA-Z0-9._-]+$'; then
            IMAGE_TAG="${{ vars.IMAGE_TAG }}"
          elif [ "${{ github.event.inputs.skip_build }}" != "true" ] && [ -n "${{ needs.build-and-push.outputs.image_tag }}" ]; then
            IMAGE_TAG="sha-${{ github.sha }}"
          else
            IMAGE_TAG="${IMAGE_TAG:-sha-${{ github.sha }}}"
          fi
          export IMAGE_TAG

          echo "üì¶ Using IMAGE_TAG: ${IMAGE_TAG}"
          echo "üìã Using kubectl context from secrets: $KUBE_CONTEXT"
          if [ -n "$KUBE_CONTEXT" ]; then
            kubectl config use-context "$KUBE_CONTEXT"
          fi

          # Debug: print key variables
          echo "üîç Environment Variables Debug:"
          echo "NAMESPACE: ${NAMESPACE}"
          echo "IMAGE_TAG: ${IMAGE_TAG}"
          echo "REGISTRY_URL: ${REGISTRY_URL}"
          echo "BACKEND_REPLICAS: ${BACKEND_REPLICAS}"
          echo "FRONTEND_REPLICAS: ${FRONTEND_REPLICAS}"
          echo "BACKEND_MEMORY_REQUEST: ${BACKEND_MEMORY_REQUEST}"
          echo "BACKEND_CPU_REQUEST: ${BACKEND_CPU_REQUEST}"

          # Use explicit variable list for envsubst to avoid accidental omissions
          VARS='$NAMESPACE $REGISTRY_URL $IMAGE_TAG $BACKEND_REPLICAS $FRONTEND_REPLICAS $BACKEND_MEMORY_REQUEST $BACKEND_CPU_REQUEST $BACKEND_MEMORY_LIMIT $BACKEND_CPU_LIMIT $FRONTEND_MEMORY_REQUEST $FRONTEND_CPU_REQUEST $FRONTEND_MEMORY_LIMIT $FRONTEND_CPU_LIMIT $FLASK_ENV $CORS_ORIGINS'
          envsubst "$VARS" < deploy/k8s-template.yaml > deploy/k8s-${ENVIRONMENT}-generated.yaml

          # Show generated YAML head for quick diagnostics
          echo "üîç Generated YAML (first 50 lines):"
          head -50 deploy/k8s-${ENVIRONMENT}-generated.yaml || true

          # Validate generated YAML for empty required fields before applying
          if grep -qE '^\s*name:\s*$|^\s*replicas:\s*$' deploy/k8s-${ENVIRONMENT}-generated.yaml; then
            echo "‚ùå Generated YAML contains empty required fields (name or replicas); aborting"
            sed -n '1,200p' deploy/k8s-${ENVIRONMENT}-generated.yaml
            exit 1
          fi

          # Create namespace if it doesn't exist
          kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -

          # Apply the manifests
          kubectl apply -f deploy/k8s-${ENVIRONMENT}-generated.yaml

          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/backend -n ${NAMESPACE}
          kubectl wait --for=condition=available --timeout=300s deployment/frontend -n ${NAMESPACE}

          echo "‚úÖ Deployment completed successfully!"
          kubectl get pods,svc -n ${NAMESPACE}
