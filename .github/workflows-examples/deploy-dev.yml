# Development Environment Deployment
# Generated by Zhuang
# Auto-deploys when code is pushed to develop branch

name: Deploy to Development

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (optional)'
        required: false
        type: string

# GitHub Environment for deployment protection
environment:
  name: development
  url: https://dev.health-platform.example.com

permissions:
  contents: read
  packages: read

concurrency:
  group: deploy-dev-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel running deployments

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: image
        run: |
          if [ "${{ github.event.inputs.image_tag }}" != "" ]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=develop-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.DEV_KUBE_CONFIG }}
          context: ${{ secrets.DEV_KUBE_CONTEXT }}

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Deploy to Development
        env:
          # Environment configuration - uses GitHub Environment Variables with fallbacks
          ENVIRONMENT: dev
          NAMESPACE: ${{ vars.NAMESPACE || 'health-platform-dev' }}
          IMAGE_TAG: ${{ steps.image.outputs.tag }}
          REGISTRY_URL: ${{ vars.REGISTRY_URL || 'ghcr.io/devnextx' }}
          SERVICE_TYPE: ${{ vars.SERVICE_TYPE || 'LoadBalancer' }}
          FLASK_ENV: ${{ vars.FLASK_ENV || 'development' }}
          
          # Resource configuration
          BACKEND_REPLICAS: ${{ vars.BACKEND_REPLICAS || '1' }}
          FRONTEND_REPLICAS: ${{ vars.FRONTEND_REPLICAS || '1' }}
          
          # Resource limits
          BACKEND_MEMORY_REQUEST: ${{ vars.BACKEND_MEMORY_REQUEST || '256Mi' }}
          BACKEND_CPU_REQUEST: ${{ vars.BACKEND_CPU_REQUEST || '250m' }}
          BACKEND_MEMORY_LIMIT: ${{ vars.BACKEND_MEMORY_LIMIT || '512Mi' }}
          BACKEND_CPU_LIMIT: ${{ vars.BACKEND_CPU_LIMIT || '500m' }}
          FRONTEND_MEMORY_REQUEST: ${{ vars.FRONTEND_MEMORY_REQUEST || '128Mi' }}
          FRONTEND_CPU_REQUEST: ${{ vars.FRONTEND_CPU_REQUEST || '100m' }}
          FRONTEND_MEMORY_LIMIT: ${{ vars.FRONTEND_MEMORY_LIMIT || '256Mi' }}
          FRONTEND_CPU_LIMIT: ${{ vars.FRONTEND_CPU_LIMIT || '200m' }}
          
          # Kubernetes context
          KUBE_CONTEXT: ${{ secrets.DEV_KUBE_CONTEXT }}
        run: |
          echo "üöÄ Deploying to Development environment"
          echo "üì¶ Using image tag: ${IMAGE_TAG}"
          echo "üè∑Ô∏è  Namespace: ${NAMESPACE}"
          echo "üî¢ Backend replicas: ${BACKEND_REPLICAS}, Frontend replicas: ${FRONTEND_REPLICAS}"
          
          # Set kubectl context
          if [ -n "$KUBE_CONTEXT" ]; then
            kubectl config use-context $KUBE_CONTEXT
          fi
          
          # Run deployment script with environment variables already set
          chmod +x deploy/deploy-configurable.sh
          ./deploy/deploy-configurable.sh
          
          echo "‚úÖ Development deployment completed!"

      - name: Health Check
        env:
          KUBE_CONTEXT: ${{ secrets.DEV_KUBE_CONTEXT }}
        run: |
          source deploy/config/dev.env
          
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=backend -n ${NAMESPACE} --timeout=300s
          kubectl wait --for=condition=ready pod -l app=frontend -n ${NAMESPACE} --timeout=300s
          
          # Get service status
          echo "üåê Service Status:"
          kubectl get pods,svc -n ${NAMESPACE}
          
          # Try to get LoadBalancer IP
          if [ "$SERVICE_TYPE" = "LoadBalancer" ]; then
            echo "‚è≥ LoadBalancer Status:"
            kubectl get svc frontend-svc -n ${NAMESPACE} -o wide
          fi

      - name: Notify on success
        if: success()
        run: |
          echo "üéâ Development deployment successful!"
          echo "Environment: Development"
          echo "Image Tag: ${{ steps.image.outputs.tag }}"
          echo "Commit: ${{ github.sha }}"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Development deployment failed!"
          echo "Check logs above for details"
          # Here you could add Slack/Teams notification
