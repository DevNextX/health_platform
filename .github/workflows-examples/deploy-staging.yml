# Staging Environment Deployment
# Generated by Zhuang
# Auto-deploys when code is pushed to staging branch

name: Deploy to Staging

on:
  push:
    branches: [staging]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (optional)'
        required: false
        type: string

# GitHub Environment for deployment protection
environment:
  name: staging
  url: https://staging.health-platform.example.com

permissions:
  contents: read
  packages: read

concurrency:
  group: deploy-staging-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: image
        run: |
          if [ "${{ github.event.inputs.image_tag }}" != "" ]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=staging-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.STAGING_KUBE_CONFIG }}
          context: ${{ secrets.STAGING_KUBE_CONTEXT }}

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base

      # Run automated tests before deployment
      - name: Pre-deployment Tests
        run: |
          echo "üß™ Running pre-deployment validation..."
          # Add smoke tests, configuration validation, etc.
          # python -m pytest tests/smoke/ -v

      - name: Deploy to Staging
        env:
          # Environment configuration
          ENVIRONMENT: staging
          NAMESPACE: ${{ vars.NAMESPACE || 'health-platform-staging' }}
          IMAGE_TAG: ${{ steps.image.outputs.tag }}
          REGISTRY_URL: ${{ vars.REGISTRY_URL || 'ghcr.io/devnextx' }}
          SERVICE_TYPE: ${{ vars.SERVICE_TYPE || 'LoadBalancer' }}
          FLASK_ENV: staging
          
          # Resource configuration (environment-specific)
          BACKEND_REPLICAS: ${{ vars.BACKEND_REPLICAS || '2' }}
          FRONTEND_REPLICAS: ${{ vars.FRONTEND_REPLICAS || '2' }}
          
          # Resource limits (fixed values - no need for environment variables)
          BACKEND_MEMORY_REQUEST: 384Mi
          BACKEND_CPU_REQUEST: 375m
          BACKEND_MEMORY_LIMIT: 768Mi
          BACKEND_CPU_LIMIT: 750m
          FRONTEND_MEMORY_REQUEST: 192Mi
          FRONTEND_CPU_REQUEST: 150m
          FRONTEND_MEMORY_LIMIT: 384Mi
          FRONTEND_CPU_LIMIT: 300m
          
          # Kubernetes context
          KUBE_CONTEXT: ${{ secrets.STAGING_KUBE_CONTEXT }}
        run: |
          echo "üöÄ Deploying to Staging environment"
          echo "üì¶ Using image tag: ${IMAGE_TAG}"
          
          # Load environment configuration
          source deploy/config/staging.env
          
          # Override image tag
          export IMAGE_TAG="${IMAGE_TAG}"
          
          # Set kubectl context
          if [ -n "$KUBE_CONTEXT" ]; then
            kubectl config use-context $KUBE_CONTEXT
          fi
          
          # Run deployment script
          chmod +x deploy/deploy-configurable.sh
          ./deploy/deploy-configurable.sh
          
          echo "‚úÖ Staging deployment completed!"

      - name: Health Check and Validation
        env:
          KUBE_CONTEXT: ${{ secrets.STAGING_KUBE_CONTEXT }}
        run: |
          source deploy/config/staging.env
          
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=backend -n ${NAMESPACE} --timeout=300s
          kubectl wait --for=condition=ready pod -l app=frontend -n ${NAMESPACE} --timeout=300s
          
          # Get service status
          echo "üåê Service Status:"
          kubectl get pods,svc -n ${NAMESPACE}
          
          # Get LoadBalancer IP and test endpoints
          if [ "$SERVICE_TYPE" = "LoadBalancer" ]; then
            echo "‚è≥ Getting LoadBalancer IP..."
            FRONTEND_IP=$(kubectl get svc frontend-svc -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
            echo "Frontend IP: ${FRONTEND_IP}"
            
            if [ "$FRONTEND_IP" != "pending" ] && [ "$FRONTEND_IP" != "" ]; then
              echo "üîç Testing health endpoints..."
              # Test health endpoint (with retry)
              for i in {1..30}; do
                if curl -f "http://${FRONTEND_IP}/api/health" --connect-timeout 5; then
                  echo "‚úÖ Health check passed!"
                  break
                fi
                echo "‚è≥ Attempt $i/30 - waiting for service..."
                sleep 10
              done
            fi
          fi

      # Run integration tests against staging
      - name: Integration Tests
        env:
          KUBE_CONTEXT: ${{ secrets.STAGING_KUBE_CONTEXT }}
        run: |
          echo "üß™ Running integration tests against staging..."
          source deploy/config/staging.env
          
          # Get service endpoint for testing
          if [ "$SERVICE_TYPE" = "LoadBalancer" ]; then
            FRONTEND_IP=$(kubectl get svc frontend-svc -n ${NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [ -n "$FRONTEND_IP" ]; then
              export STAGING_URL="http://${FRONTEND_IP}"
              echo "Testing against: ${STAGING_URL}"
              # Run integration tests here
              # python -m pytest tests/integration/ -v --url=${STAGING_URL}
            fi
          fi

      - name: Notify on success
        if: success()
        run: |
          echo "üéâ Staging deployment successful!"
          echo "Environment: Staging"
          echo "Image Tag: ${{ steps.image.outputs.tag }}"
          echo "Commit: ${{ github.sha }}"
          echo "Ready for production promotion"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Staging deployment failed!"
          echo "Check logs above for details"
          # Add notification integrations here
