"""
Test cases for user endpoints. Generated by Zhuang
"""
import json
import pytest


class TestUserEndpoints:
    """Test user related endpoints"""
    
    def test_get_user_info(self, client, auth_headers):
        """Test getting user information"""
        access_headers = auth_headers['access']
        
        # Get user info (the user created in auth_headers fixture has id=1)
        response = client.get('/api/v1/user/1', headers=access_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert data['username'] == 'testuser'
        assert data['email'] == 'test@example.com'
        assert data['age'] == 25
        assert data['gender'] == 'male'
        assert data['weight'] == 70
        assert 'password_hash' not in data  # Should not expose password
    
    def test_get_user_info_unauthorized(self, client):
        """Test getting user info without authorization"""
        response = client.get('/api/v1/user/1')
        assert response.status_code == 401
    
    def test_get_user_info_wrong_user(self, client, auth_headers):
        """Test accessing another user's info"""
        access_headers = auth_headers['access']
        
        # Try to access user with id=999 (non-existent or different user)
        response = client.get('/api/v1/user/999', headers=access_headers)
        assert response.status_code == 403  # Forbidden - can't access other user's data
    
    def test_update_user_info(self, client, auth_headers):
        """Test updating user information"""
        access_headers = auth_headers['access']
        
        update_data = {
            'age': 26,
            'weight': 75,
            'gender': 'male'  # Keep the same
        }
        
        response = client.put('/api/v1/user/1', json=update_data, headers=access_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert data['age'] == 26
        assert data['weight'] == 75
        assert data['username'] == 'testuser'  # Should remain unchanged
        assert data['email'] == 'test@example.com'  # Should remain unchanged
    
    def test_update_user_info_partial(self, client, auth_headers):
        """Test partial update of user information"""
        access_headers = auth_headers['access']
        
        # Only update age
        update_data = {'age': 30}
        
        response = client.put('/api/v1/user/1', json=update_data, headers=access_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert data['age'] == 30
        assert data['weight'] == 70  # Should remain unchanged
        assert data['gender'] == 'male'  # Should remain unchanged
    
    def test_update_user_info_unauthorized(self, client):
        """Test updating user info without authorization"""
        update_data = {'age': 30}
        
        response = client.put('/api/v1/user/1', json=update_data)
        assert response.status_code == 401
    
    def test_register_via_user_endpoint(self, client):
        """Test user registration via POST /api/v1/user (compatibility)"""
        user_data = {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'password': 'password123',
            'age': 28,
            'gender': 'female',
            'weight': 60
        }
        
        response = client.post('/api/v1/user', json=user_data)
        assert response.status_code == 201
        
        data = response.get_json()
        assert data['username'] == 'newuser'
        assert data['email'] == 'newuser@example.com'
        assert 'id' in data
        assert 'created_at' in data
        assert 'password' not in data  # Password should not be returned
