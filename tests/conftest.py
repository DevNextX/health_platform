"""
Test configuration and fixtures. Generated by Zhuang
"""
import pytest
import tempfile
import os
from src.app import create_app
from src.extensions import db
from src.config import Config


class TestConfig(Config):
    TESTING = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    JWT_SECRET_KEY = 'test-secret-key'
    WTF_CSRF_ENABLED = False
    RATELIMIT_ENABLED = False  # Disable rate limiting for tests


@pytest.fixture
def app():
    """Create and configure a new app instance for each test."""
    app = create_app(TestConfig)
    
    with app.app_context():
        db.create_all()
        yield app
        db.drop_all()


@pytest.fixture
def client(app):
    """A test client for the app."""
    return app.test_client()


@pytest.fixture
def runner(app):
    """A test runner for the app's Click commands."""
    return app.test_cli_runner()


@pytest.fixture
def auth_headers(client):
    """Create a test user and return auth headers."""
    # Register a test user
    client.post('/api/v1/auth/register', json={
        'username': 'testuser',
        'email': 'test@example.com',
        'password': 'password123',
        'age': 25,
        'gender': 'male',
        'weight': 70
    })
    
    # Login to get tokens
    response = client.post('/api/v1/auth/login', json={
        'email': 'test@example.com',
        'password': 'password123'
    })
    
    data = response.get_json()
    access_token = data['access_token']
    refresh_token = data['refresh_token']
    
    return {
        'access': {'Authorization': f'Bearer {access_token}'},
        'refresh': {'Authorization': f'Bearer {refresh_token}'},
        'tokens': data
    }
