"""
Test cases for authentication endpoints. Generated by Zhuang
"""
import json
import pytest
from src.manager.user_manager import UserManager


class TestAuthEndpoints:
    """Test authentication related endpoints"""
    
    def test_health_check(self, client):
        """Test the health check endpoint"""
        response = client.get('/healthz')
        assert response.status_code == 200
        data = response.get_json()
        assert data['status'] == 'ok'
    
    def test_register_success(self, client):
        """Test successful user registration"""
        user_data = {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'password': 'password123',
            'age': 30,
            'gender': 'female',
            'weight': 65
        }
        
        response = client.post('/api/v1/auth/register', json=user_data)
        assert response.status_code == 201
        
        data = response.get_json()
        assert data['username'] == 'newuser'
        assert data['email'] == 'newuser@example.com'
        assert 'id' in data
        assert 'created_at' in data
        assert 'password' not in data  # Password should not be returned
    
    def test_register_missing_fields(self, client):
        """Test registration with missing required fields"""
        user_data = {
            'username': 'incomplete'
            # Missing email and password
        }
        
        response = client.post('/api/v1/auth/register', json=user_data)
        assert response.status_code == 400
        
        data = response.get_json()
        assert data['code'] == '400'
        assert 'Missing required fields' in data['message']
    
    def test_register_duplicate_email(self, client):
        """Test registration with duplicate email"""
        user_data = {
            'username': 'user1',
            'email': 'duplicate@example.com',
            'password': 'password123'
        }
        
        # First registration should succeed
        response1 = client.post('/api/v1/auth/register', json=user_data)
        assert response1.status_code == 201
        
        # Second registration with same email should fail
        user_data['username'] = 'user2'
        response2 = client.post('/api/v1/auth/register', json=user_data)
        assert response2.status_code == 409
        
        data = response2.get_json()
        assert data['code'] == '409'
        assert 'Email already exists' in data['message']
    
    def test_login_success(self, client):
        """Test successful login"""
        # First register a user
        user_data = {
            'username': 'loginuser',
            'email': 'login@example.com',
            'password': 'password123'
        }
        client.post('/api/v1/auth/register', json=user_data)
        
        # Then login
        login_data = {
            'email': 'login@example.com',
            'password': 'password123'
        }
        
        response = client.post('/api/v1/auth/login', json=login_data)
        assert response.status_code == 200
        
        data = response.get_json()
        assert 'access_token' in data
        assert 'refresh_token' in data
        assert data['token_type'] == 'Bearer'
        assert data['expires_in'] == 60 * 30  # 30 minutes
        assert data['refresh_expires_in'] == 60 * 60 * 24 * 7  # 7 days
    
    def test_login_invalid_credentials(self, client):
        """Test login with invalid credentials"""
        login_data = {
            'email': 'nonexistent@example.com',
            'password': 'wrongpassword'
        }
        
        response = client.post('/api/v1/auth/login', json=login_data)
        assert response.status_code == 401
        
        data = response.get_json()
        assert data['code'] == '401'
        assert 'Invalid credentials' in data['message']
    
    def test_login_missing_fields(self, client):
        """Test login with missing fields"""
        login_data = {
            'email': 'test@example.com'
            # Missing password
        }
        
        response = client.post('/api/v1/auth/login', json=login_data)
        assert response.status_code == 400
        
        data = response.get_json()
        assert data['code'] == '400'
        assert 'Email and password required' in data['message']
    
    def test_refresh_token(self, client, auth_headers):
        """Test token refresh"""
        refresh_headers = auth_headers['refresh']
        
        response = client.post('/api/v1/auth/refresh', headers=refresh_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert 'access_token' in data
        assert 'refresh_token' in data
        assert data['token_type'] == 'Bearer'
    
    def test_refresh_token_invalid(self, client):
        """Test refresh with invalid token"""
        headers = {'Authorization': 'Bearer invalid_token'}
        
        response = client.post('/api/v1/auth/refresh', headers=headers)
        assert response.status_code == 422  # JWT decode error
    
    def test_logout(self, client, auth_headers):
        """Test logout functionality"""
        refresh_headers = auth_headers['refresh']
        
        response = client.post('/api/v1/auth/logout', headers=refresh_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert data['message'] == 'Logged out'
        
        # Try to use the refresh token again (should fail)
        response2 = client.post('/api/v1/auth/refresh', headers=refresh_headers)
        assert response2.status_code == 401
    
    def test_logout_all(self, client, auth_headers):
        """Test logout all sessions"""
        access_headers = auth_headers['access']
        
        response = client.post('/api/v1/auth/logout-all', headers=access_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert data['message'] == 'Logged out all sessions'
