"""
Test cases for family member endpoints. Generated by Zhuang
"""
import pytest
from tests.conftest import auth_headers


class TestFamilyMemberEndpoints:
    def test_list_family_members(self, client, auth_headers):
        """Test listing family members creates default Self member"""
        access_headers = auth_headers['access']
        response = client.get('/api/v1/family', headers=access_headers)
        assert response.status_code == 200
        data = response.get_json()
        assert "members" in data
        members = data["members"]
        assert len(members) == 1
        assert members[0]["name"] == "本人 (Self)"
        assert members[0]["is_self"] is True

    def test_create_family_member(self, client, auth_headers):
        """Test creating a new family member"""
        access_headers = auth_headers['access']
        member_data = {
            "name": "小明",
            "gender": "M",
            "age": 10,
            "height": 140.5,
            "weight": 35.0
        }
        response = client.post('/api/v1/family', json=member_data, headers=access_headers)
        assert response.status_code == 201
        data = response.get_json()
        assert data["name"] == "小明"
        assert data["gender"] == "M"
        assert data["age"] == 10
        assert data["height"] == 140.5
        assert data["weight"] == 35.0
        assert data["is_self"] is False

    def test_create_family_member_missing_name(self, client, auth_headers):
        """Test creating family member without name fails"""
        access_headers = auth_headers['access']
        member_data = {"gender": "F"}
        response = client.post('/api/v1/family', json=member_data, headers=access_headers)
        assert response.status_code == 400
        data = response.get_json()
        assert "Name is required" in data["message"]

    def test_create_family_member_invalid_age(self, client, auth_headers):
        """Test creating family member with invalid age fails"""
        access_headers = auth_headers['access']
        member_data = {"name": "Test", "age": 200}
        response = client.post('/api/v1/family', json=member_data, headers=access_headers)
        assert response.status_code == 400
        data = response.get_json()
        assert "Age must be between 0 and 150" in data["message"]

    def test_get_family_member(self, client, auth_headers):
        """Test getting a specific family member"""
        access_headers = auth_headers['access']
        # First create a member
        member_data = {"name": "Test Member", "age": 25}
        create_response = client.post('/api/v1/family', json=member_data, headers=access_headers)
        created_member = create_response.get_json()
        
        # Then get it
        response = client.get(f'/api/v1/family/{created_member["id"]}', headers=access_headers)
        assert response.status_code == 200
        data = response.get_json()
        assert data["name"] == "Test Member"
        assert data["age"] == 25

    def test_get_family_member_not_found(self, client, auth_headers):
        """Test getting non-existent family member returns 404"""
        access_headers = auth_headers['access']
        response = client.get('/api/v1/family/999', headers=access_headers)
        assert response.status_code == 404

    def test_update_family_member(self, client, auth_headers):
        """Test updating a family member"""
        access_headers = auth_headers['access']
        # First create a member
        member_data = {"name": "Original Name", "age": 25}
        create_response = client.post('/api/v1/family', json=member_data, headers=access_headers)
        created_member = create_response.get_json()
        
        # Then update it
        update_data = {"name": "Updated Name", "age": 30}
        response = client.put(f'/api/v1/family/{created_member["id"]}', json=update_data, headers=access_headers)
        assert response.status_code == 200
        data = response.get_json()
        assert data["name"] == "Updated Name"
        assert data["age"] == 30

    def test_delete_family_member(self, client, auth_headers):
        """Test deleting a family member"""
        access_headers = auth_headers['access']
        # First create a member
        member_data = {"name": "To Delete", "age": 25}
        create_response = client.post('/api/v1/family', json=member_data, headers=access_headers)
        created_member = create_response.get_json()
        
        # Then delete it
        response = client.delete(f'/api/v1/family/{created_member["id"]}', headers=access_headers)
        assert response.status_code == 200
        
        # Verify it's deleted
        response = client.get(f'/api/v1/family/{created_member["id"]}', headers=access_headers)
        assert response.status_code == 404

    def test_delete_self_member_fails(self, client, auth_headers):
        """Test that deleting the Self member is not allowed"""
        access_headers = auth_headers['access']
        # Get the Self member
        response = client.get('/api/v1/family', headers=access_headers)
        members = response.get_json()["members"]
        self_member = next(m for m in members if m["is_self"])
        
        # Try to delete it
        response = client.delete(f'/api/v1/family/{self_member["id"]}', headers=access_headers)
        assert response.status_code == 400
        data = response.get_json()
        assert "Cannot delete the Self member" in data["message"]

    def test_health_record_with_family_member(self, client, auth_headers):
        """Test creating health records for specific family members"""
        access_headers = auth_headers['access']
        # First create a family member
        member_data = {"name": "Child", "age": 8}
        member_response = client.post('/api/v1/family', json=member_data, headers=access_headers)
        member = member_response.get_json()
        
        # Create health record for this member
        record_data = {
            "family_member_id": member["id"],
            "systolic": 110,
            "diastolic": 70,
            "heart_rate": 85,
            "timestamp": "2025-01-01T10:00:00Z",
            "tags": ["morning"],
            "note": "Child's morning reading"
        }
        response = client.post('/api/v1/health', json=record_data, headers=access_headers)
        assert response.status_code == 201
        data = response.get_json()
        assert data["family_member_id"] == member["id"]

    def test_health_record_family_member_filter(self, client, auth_headers):
        """Test filtering health records by family member"""
        access_headers = auth_headers['access']
        # Create a family member
        member_data = {"name": "Test Member"}
        member_response = client.post('/api/v1/family', json=member_data, headers=access_headers)
        member = member_response.get_json()
        
        # Create health record for this member
        record_data = {
            "family_member_id": member["id"],
            "systolic": 120,
            "diastolic": 80
        }
        client.post('/api/v1/health', json=record_data, headers=access_headers)
        
        # Filter records by family member
        response = client.get(f'/api/v1/health?family_member_id={member["id"]}', headers=access_headers)
        assert response.status_code == 200
        data = response.get_json()
        records = data["records"]
        assert len(records) >= 1
        assert all(r["family_member_id"] == member["id"] for r in records)

    def test_health_record_defaults_to_self(self, client, auth_headers):
        """Test that health records default to Self member when no family_member_id specified"""
        access_headers = auth_headers['access']
        record_data = {
            "systolic": 130,
            "diastolic": 85
        }
        response = client.post('/api/v1/health', json=record_data, headers=access_headers)
        assert response.status_code == 201
        data = response.get_json()
        assert "family_member_id" in data
        
        # Verify it's the Self member
        response = client.get('/api/v1/family', headers=access_headers)
        members = response.get_json()["members"]
        self_member = next(m for m in members if m["is_self"])
        assert data["family_member_id"] == self_member["id"]

    def test_health_record_invalid_family_member(self, client, auth_headers):
        """Test creating health record with invalid family member ID fails"""
        access_headers = auth_headers['access']
        record_data = {
            "family_member_id": 999,
            "systolic": 120,
            "diastolic": 80
        }
        response = client.post('/api/v1/health', json=record_data, headers=access_headers)
        assert response.status_code == 404
        data = response.get_json()
        assert "Family member not found" in data["message"]