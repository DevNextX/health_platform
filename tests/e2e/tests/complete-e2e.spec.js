/**
 * Complete E2E Tests for Health Platform
 * Generated by Zhuang
 */
import { test, expect } from '@playwright/test';

// Generated by Zhuang - dynamic test user per run
const ts = Date.now();
const testUser = {
  username: `e2e_user_${ts}`,
  email: `e2e.test.${ts}@example.com`,
  password: 'TestPassword123!',
  age: 30,
  gender: 'M',
  weight: 70,
};

test.describe('Health Platform E2E Tests', () => {

  test.beforeAll(async ({ browser }) => {
    // Setup: Create test user if not exists
    const context = await browser.newContext();
    const page = await context.newPage();
    
    try {
      await page.goto('/register');
      console.log(`Submitting registration for: ${testUser.email}`);

      // Fill registration form with correct selectors
      await page.fill('input[placeholder="请输入用户名"]', testUser.username);
      await page.fill('input[placeholder="请输入邮箱地址"]', testUser.email);
      await page.fill('input[placeholder="请输入密码"]', testUser.password);
      await page.fill('input[placeholder="请确认密码"]', testUser.password);

      // Handle age / gender / weight inputs
      await page.fill('input[placeholder="年龄"]', String(testUser.age));
      await page.click('.ant-select-selector');
      await page.click('text=男');
      await page.fill('input[placeholder="体重"]', String(testUser.weight));

      // Submit using robust locator that tolerates spacing: "注册" or "注 册"
      const submitBtn = page.locator('button[type="submit"]').filter({ hasText: /注\s?册|注册/ });
      await expect(submitBtn).toBeVisible({ timeout: 10000 });
      await expect(submitBtn).toBeEnabled();
      await submitBtn.click();

      // Wait for toast (success or already-exists) and proceed
      await Promise.race([
        page.waitForSelector('.ant-message-success', { timeout: 8000 }),
        page.waitForSelector('.ant-message-error', { timeout: 8000 }),
      ]);
    } catch (error) {
      console.log('User might already exist or registration failed:', error.message);
    }
    
    await context.close();
  });

  test.beforeEach(async ({ page }) => {
    // Login before each test
    await page.goto('/login');
    
    // Fill login form with correct placeholders
    await page.fill('input[placeholder="邮箱地址"]', testUser.email);
    await page.fill('input[placeholder="密码"]', testUser.password);
    
  // Submit login with explicit button
  const loginSubmit = page.locator('button[type="submit"]').filter({ hasText: /登\s?录|登录/ });
  await expect(loginSubmit.first()).toBeVisible({ timeout: 10000 });
  await expect(loginSubmit.first()).toBeEnabled();
  await loginSubmit.first().click();
    
  // Wait for successful login (redirect to dashboard)
  await expect(page).toHaveURL(/.*dashboard.*|.*localhost:3000\/$/);
  await expect(page.locator('text=健康仪表板')).toBeVisible();
  });

  test.describe('Dashboard', () => {
    test('should display dashboard with statistics', async ({ page }) => {
      // Check dashboard elements
      await expect(page.locator('text=总记录数')).toBeVisible();
      await expect(page.locator('text=本周记录')).toBeVisible();
      await expect(page.locator('text=平均收缩压')).toBeVisible();
      await expect(page.locator('text=平均舒张压')).toBeVisible();
      
      // Check navigation menu
      await expect(page.locator('text=健康记录')).toBeVisible();
  await expect(page.locator('text=个人信息')).toBeVisible();
    });
  });

  test.describe('Health Records Management', () => {
    
    test.beforeEach(async ({ page }) => {
      // Navigate to health records page
      await page.click('text=健康记录');
      await expect(page).toHaveURL('/health-records');
    });

    test('should display health records page', async ({ page }) => {
      // Check page elements
  await expect(page.locator('h2:has-text("健康记录")')).toBeVisible();
      await expect(page.locator('text=添加记录')).toBeVisible();
      
      // Check table headers
      await expect(page.locator('text=时间')).toBeVisible();
      await expect(page.locator('text=血压')).toBeVisible();
      await expect(page.locator('text=心率')).toBeVisible();
      await expect(page.locator('text=操作')).toBeVisible();
    });

    test('should create new health record', async ({ page }) => {
      // Click add button
      await page.click('text=添加记录');
      
      // Wait for modal to open
      await expect(page.locator('text=添加健康记录')).toBeVisible();
      
      // Fill form using more robust selectors
      await page.locator('input[placeholder="收缩压"]').fill('120');
      await page.locator('input[placeholder="舒张压"]').fill('80');
      await page.locator('input[placeholder="心率"]').fill('72');
  await page.locator('textarea[data-testid="notes"]').fill('E2E测试记录');
      
  // Submit form with robust selector that tolerates inner spacing like "添 加"
  // Generated by Zhuang - submit within visible modal to avoid overlay intercept
  const modalAdd1 = page.locator('.ant-modal');
  await expect(modalAdd1).toBeVisible({ timeout: 10000 });
  const addBtn1 = modalAdd1.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtn1.first()).toBeVisible({ timeout: 10000 });
  await expect(addBtn1.first()).toBeEnabled();
  await addBtn1.first().click();
      
      // Check success message
      await expect(page.locator('.ant-message-success')).toBeVisible({ timeout: 10000 });
      
      // Wait a bit for the table to refresh
      await page.waitForTimeout(2000);
      
      // Verify record appears in table (check for blood pressure format)
      await expect(page.locator('text=120/80')).toBeVisible();
    });

    test('should edit existing health record', async ({ page }) => {
      // First create a record
      await page.click('text=添加记录');
      await page.locator('input[placeholder="收缩压"]').fill('110');
      await page.locator('input[placeholder="舒张压"]').fill('70');
      await page.locator('input[placeholder="心率"]').fill('65');
  // Generated by Zhuang - robust Add button click
  const modalAdd2 = page.locator('.ant-modal');
  await expect(modalAdd2).toBeVisible({ timeout: 10000 });
  const addBtn2 = modalAdd2.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtn2.first()).toBeVisible({ timeout: 10000 });
  await addBtn2.first().click();
      
      // Wait for success
      await expect(page.locator('.ant-message-success')).toBeVisible();
      await page.waitForTimeout(2000);
      
      // Find and click edit button for the first record
      await page.locator('button:has-text("编辑")').first().click();
      
      // Wait for edit modal
      await expect(page.locator('text=编辑健康记录')).toBeVisible();
      
      // Update values
      await page.locator('input[placeholder="收缩压"]').fill('125');
      await page.locator('input[placeholder="舒张压"]').fill('85');
      
      // Submit changes
  // Generated by Zhuang - robust Update button click
  const modalEdit1 = page.locator('.ant-modal');
  await expect(modalEdit1).toBeVisible({ timeout: 10000 });
  const updateBtn1 = modalEdit1.locator('button[type="submit"]').filter({ hasText: /更\s?新|更新/ });
  await expect(updateBtn1.first()).toBeVisible({ timeout: 10000 });
  await updateBtn1.first().click();
      
      // Check success message
      await expect(page.locator('.ant-message-success')).toBeVisible();
      await page.waitForTimeout(2000);
      
      // Verify updated values
      await expect(page.locator('text=125/85')).toBeVisible();
    });

    test('should delete health record', async ({ page }) => {
      // First create a record
      await page.click('text=添加记录');
      await page.locator('input[placeholder="收缩压"]').fill('100');
      await page.locator('input[placeholder="舒张压"]').fill('60');
  // Generated by Zhuang - robust Add button click
  const modalAdd3 = page.locator('.ant-modal');
  await expect(modalAdd3).toBeVisible({ timeout: 10000 });
  const addBtn3 = modalAdd3.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtn3.first()).toBeVisible({ timeout: 10000 });
  await addBtn3.first().click();
      
      // Wait for success
      await expect(page.locator('.ant-message-success')).toBeVisible();
      await page.waitForTimeout(2000);
      
      // Click delete button for the first record
      await page.locator('button:has-text("删除")').first().click();
      
      // Confirm deletion in popup
  // Generated by Zhuang - robust Confirm button click
  const popconfirm1 = page.locator('.ant-popconfirm');
  const confirmBtn1 = popconfirm1.locator('button').filter({ hasText: /确\s?定|确定/ });
  await expect(confirmBtn1.first()).toBeVisible({ timeout: 10000 });
  await confirmBtn1.first().click();
      
      // Check success message
      await expect(page.locator('.ant-message-success')).toBeVisible();
      await page.waitForTimeout(2000);
      
      // Verify record is removed (this specific blood pressure should not exist)
      await expect(page.locator('text=100/60')).not.toBeVisible();
    });

    test('should validate form inputs', async ({ page }) => {
      // Click add button
      await page.click('text=添加记录');
      
      // Try to submit empty form
  // Generated by Zhuang - robust Add button click
  const modalAdd4 = page.locator('.ant-modal');
  await expect(modalAdd4).toBeVisible({ timeout: 10000 });
  const addBtn4 = modalAdd4.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtn4.first()).toBeVisible({ timeout: 10000 });
  await addBtn4.first().click();
      
      // Check validation messages
      await expect(page.locator('text=请输入收缩压')).toBeVisible();
      await expect(page.locator('text=请输入舒张压')).toBeVisible();
      
      // Test invalid values (out of range)
      await page.locator('input[placeholder="收缩压"]').fill('300'); // Out of range
      await page.locator('input[placeholder="舒张压"]').fill('30');  // Out of range
      
      // Try to submit
  // Generated by Zhuang - robust Add button click
  const modalAdd5 = page.locator('.ant-modal');
  await expect(modalAdd5).toBeVisible({ timeout: 10000 });
  const addBtn5 = modalAdd5.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtn5.first()).toBeVisible({ timeout: 10000 });
  await addBtn5.first().click();
      
      // Check validation messages for out of range values
      await expect(page.locator('text=收缩压范围：50-250')).toBeVisible();
      await expect(page.locator('text=舒张压范围：50-250')).toBeVisible();
    });
  });

  test.describe('Profile Management', () => {
    
    test.beforeEach(async ({ page }) => {
      // Navigate to profile page
  await page.click('text=个人信息');
      await expect(page).toHaveURL('/profile');
    });

    test('should display and update profile', async ({ page }) => {
      // Check profile page elements
  await expect(page.locator('h2:has-text("个人信息")')).toBeVisible();
      
  // Check form fields are populated with this run's user
  await expect(page.locator(`input[value="${testUser.username}"]`)).toBeVisible();
  await expect(page.locator(`input[value="${testUser.email}"]`)).toBeVisible();
      
      // Update weight
      const weightInput = page.locator('input[placeholder*="体重"]');
      await weightInput.clear();
      await weightInput.fill('75');
      
      // Save changes
      await page.click('button:has-text("保存")');
      
      // Check success message
      await expect(page.locator('.ant-message-success')).toBeVisible();
    });
  });

  test.describe('Navigation and Logout', () => {
    
    test('should navigate between pages', async ({ page }) => {
      // Test navigation between different pages
      await page.click('text=健康记录');
      await expect(page).toHaveURL('/health-records');
      
  await page.click('text=仪表板');
  await expect(page).toHaveURL(/.*dashboard.*|.*localhost:3000\/$/);
      
  await page.click('text=个人信息');
      await expect(page).toHaveURL('/profile');
    });

    test('should logout successfully', async ({ page }) => {
  // Click logout button
  await page.click('button:has-text("退出登录")');
      
      // Should redirect to login page
      await expect(page).toHaveURL('/login');
      await expect(page.locator('text=请登录您的账户')).toBeVisible();
    });
  });
});
