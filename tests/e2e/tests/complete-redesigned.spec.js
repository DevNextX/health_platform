/**
 * Complete Health Platform E2E Test Suite (Redesigned)
 * Generated by Zhuang
 */
import { test, expect } from '@playwright/test';

// Generate unique test user for each test run
const timestamp = Date.now();
const testUser = {
  username: `e2e_user_${timestamp}`,
  email: `e2e.test.${timestamp}@example.com`,
  password: 'TestPassword123!',
  age: 25,
  weight: 65
};

test.describe('Health Platform Complete E2E Tests', () => {
  
  // Setup: Create test user once for all tests
  test.beforeAll(async ({ browser }) => {
    const context = await browser.newContext();
    const page = await context.newPage();
    
    try {
      console.log(`Creating test user: ${testUser.email}`);
      await page.goto('/register');
      
      // Wait for page to load
      await expect(page.locator('text=创建您的健康账户')).toBeVisible();
      
      // Fill registration form step by step
      await page.fill('input[placeholder="请输入用户名"]', testUser.username);
      await page.fill('input[placeholder="请输入邮箱地址"]', testUser.email);
      await page.fill('input[placeholder="请输入密码"]', testUser.password);
      await page.fill('input[placeholder="请确认密码"]', testUser.password);
      await page.fill('input[placeholder="年龄"]', testUser.age.toString());
      
      // Handle gender selection properly
      await page.click('.ant-select-selector');
      await page.waitForTimeout(500);
      await page.click('text=男');
      
      await page.fill('input[placeholder="体重"]', testUser.weight.toString());
      
      // Submit registration
      await page.click('button[type="submit"]');
      
      // Wait for response
      await page.waitForTimeout(2000);
      
      console.log('Test user registration completed');
      
    } catch (error) {
      console.log('Registration failed:', error.message);
    }
    
    await context.close();
  });

  // Login helper function
  async function loginUser(page) {
    await page.goto('/login');
    
    // Check login page loads
    await expect(page.locator('text=请登录您的账户')).toBeVisible();
    
    // Fill login form
    await page.fill('input[placeholder="邮箱地址"]', testUser.email);
    await page.fill('input[placeholder="密码"]', testUser.password);
    
  // Submit login (robust against spacing like "登 录")
  const loginSubmit = page.locator('button[type="submit"]').filter({ hasText: /登\s?录|登录/ });
  await loginSubmit.first().waitFor({ state: 'visible' });
  await loginSubmit.first().click();
    
    // Wait for login to complete - accept either URL
    await page.waitForTimeout(2000);
    const currentUrl = page.url();
    
    if (currentUrl.includes('/dashboard') || currentUrl.includes('localhost:3000/')) {
      // Login successful, wait for dashboard elements
      await expect(page.locator('text=健康仪表板')).toBeVisible({ timeout: 10000 });
      return true;
    } else {
      throw new Error(`Login failed - URL: ${currentUrl}`);
    }
  }

  test.describe('Authentication', () => {
    
    test('should login successfully', async ({ page }) => {
      const success = await loginUser(page);
      expect(success).toBe(true);
      console.log('✅ Login test passed');
    });
  });

  test.describe('Dashboard', () => {
    
    test.beforeEach(async ({ page }) => {
      await loginUser(page);
    });

    test('should display dashboard statistics', async ({ page }) => {
      // Check dashboard elements are visible
      await expect(page.locator('text=总记录数')).toBeVisible();
      await expect(page.locator('text=本周记录')).toBeVisible();
      await expect(page.locator('text=平均收缩压')).toBeVisible();
      await expect(page.locator('text=平均舒张压')).toBeVisible();
      
      console.log('✅ Dashboard statistics displayed');
    });
  });

  test.describe('Health Records Management', () => {
    
    test.beforeEach(async ({ page }) => {
      await loginUser(page);
      
      // Navigate to health records page
      await page.click('text=健康记录');
      await page.waitForTimeout(1000);
      
      // Check we're on the right page
      const currentUrl = page.url();
      if (!currentUrl.includes('/health-records')) {
        throw new Error(`Failed to navigate to health records page. Current URL: ${currentUrl}`);
      }
    });

    test('should display health records page', async ({ page }) => {
      // Check page elements
  await expect(page.locator('h2:has-text("健康记录")')).toBeVisible();
      await expect(page.locator('text=添加记录')).toBeVisible();
      
      // Check table headers
      await expect(page.locator('text=时间')).toBeVisible();
      await expect(page.locator('text=血压')).toBeVisible();
      await expect(page.locator('text=心率')).toBeVisible();
      await expect(page.locator('text=操作')).toBeVisible();
      
      console.log('✅ Health records page displayed correctly');
    });

    test('should create new health record', async ({ page }) => {
      // Click add button
      await page.click('text=添加记录');
      await page.waitForTimeout(1000);
      
      // Check modal opened
      await expect(page.locator('text=添加健康记录')).toBeVisible();
      
      // Fill form with unique test data
      const testData = {
        systolic: '125',
        diastolic: '85',
        heartRate: '75'
      };
      
      await page.fill('input[placeholder="收缩压"]', testData.systolic);
      await page.fill('input[placeholder="舒张压"]', testData.diastolic);
      await page.fill('input[placeholder="心率"]', testData.heartRate);
  await page.fill('textarea[data-testid="notes"]', `E2E测试记录 - ${timestamp}`);
      
      // Submit form
  // Generated by Zhuang - robust Add button (handles "添 加")
  const addBtnCR1 = page.locator('button').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnCR1.first()).toBeVisible({ timeout: 10000 });
  await addBtnCR1.first().click();
      
      // Wait for success message
      await expect(page.locator('.ant-message-success')).toBeVisible({ timeout: 10000 });
      
      // Wait for table to refresh and verify record appears
      await page.waitForTimeout(2000);
      await expect(page.locator(`text=${testData.systolic}/${testData.diastolic}`)).toBeVisible();
      
      console.log('✅ Health record created successfully');
    });

    test('should edit health record', async ({ page }) => {
      // First create a record to edit
      await page.click('text=添加记录');
      await page.waitForTimeout(1000);
      
      const originalData = {
        systolic: '130',
        diastolic: '90',
        heartRate: '80'
      };
      
      await page.fill('input[placeholder="收缩压"]', originalData.systolic);
      await page.fill('input[placeholder="舒张压"]', originalData.diastolic);
      await page.fill('input[placeholder="心率"]', originalData.heartRate);
  // Generated by Zhuang - robust Add button
  const addBtnCR2 = page.locator('button').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnCR2.first()).toBeVisible({ timeout: 10000 });
  await addBtnCR2.first().click();
      
      // Wait for success
      await expect(page.locator('.ant-message-success')).toBeVisible();
      await page.waitForTimeout(2000);
      
      // Click edit button for the first record
      await page.click('button:has-text("编辑")');
      await page.waitForTimeout(1000);
      
      // Check edit modal opened
      await expect(page.locator('text=编辑健康记录')).toBeVisible();
      
      // Update values
      const updatedData = {
        systolic: '135',
        diastolic: '95'
      };
      
      await page.fill('input[placeholder="收缩压"]', updatedData.systolic);
      await page.fill('input[placeholder="舒张压"]', updatedData.diastolic);
      
      // Submit changes
  // Generated by Zhuang - robust Update button (handles "更 新")
  const updateBtnCR1 = page.locator('button').filter({ hasText: /更\s?新|更新/ });
  await expect(updateBtnCR1.first()).toBeVisible({ timeout: 10000 });
  await updateBtnCR1.first().click();
      
      // Wait for success
      await expect(page.locator('.ant-message-success')).toBeVisible();
      await page.waitForTimeout(2000);
      
      // Verify updated values appear
      await expect(page.locator(`text=${updatedData.systolic}/${updatedData.diastolic}`)).toBeVisible();
      
      console.log('✅ Health record edited successfully');
    });

    test('should delete health record', async ({ page }) => {
      // First create a record to delete
      await page.click('text=添加记录');
      await page.waitForTimeout(1000);
      
      const testData = {
        systolic: '140',
        diastolic: '100',
        heartRate: '85'
      };
      
      await page.fill('input[placeholder="收缩压"]', testData.systolic);
      await page.fill('input[placeholder="舒张压"]', testData.diastolic);
      await page.fill('input[placeholder="心率"]', testData.heartRate);
  // Generated by Zhuang - robust Add button
  const addBtnCR3 = page.locator('button').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnCR3.first()).toBeVisible({ timeout: 10000 });
  await addBtnCR3.first().click();
      
      // Wait for success
      await expect(page.locator('.ant-message-success')).toBeVisible();
      await page.waitForTimeout(2000);
      
      // Click delete button for the first record
      await page.click('button:has-text("删除")');
      await page.waitForTimeout(500);
      
      // Confirm deletion in popup
  // Generated by Zhuang - robust Confirm button (handles "确 定")
  const confirmBtnCR1 = page.locator('button').filter({ hasText: /确\s?定|确定/ });
  await expect(confirmBtnCR1.first()).toBeVisible({ timeout: 10000 });
  await confirmBtnCR1.first().click();
      
      // Wait for success
      await expect(page.locator('.ant-message-success')).toBeVisible();
      await page.waitForTimeout(2000);
      
      // Verify record is removed (this specific blood pressure should not exist)
      await expect(page.locator(`text=${testData.systolic}/${testData.diastolic}`)).not.toBeVisible();
      
      console.log('✅ Health record deleted successfully');
    });

    test('should validate form inputs', async ({ page }) => {
      // Click add button
      await page.click('text=添加记录');
      await page.waitForTimeout(1000);
      
      // Try to submit empty form
  // Generated by Zhuang - robust Add button
  const addBtnCR4 = page.locator('button').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnCR4.first()).toBeVisible({ timeout: 10000 });
  await addBtnCR4.first().click();
      
      // Check validation messages appear
      await expect(page.locator('text=请输入收缩压')).toBeVisible();
      await expect(page.locator('text=请输入舒张压')).toBeVisible();
      
      // Test invalid values (out of range)
      await page.fill('input[placeholder="收缩压"]', '300'); // Too high
      await page.fill('input[placeholder="舒张压"]', '30');  // Too low
      
      // Try to submit
  // Generated by Zhuang - robust Add button
  const addBtnCR5 = page.locator('button').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnCR5.first()).toBeVisible({ timeout: 10000 });
  await addBtnCR5.first().click();
      
      // Check validation messages for out of range values
  await expect(page.locator('text=收缩压范围：50-250 mmHg')).toBeVisible();
  await expect(page.locator('text=舒张压范围：50-250 mmHg')).toBeVisible();
      
      console.log('✅ Form validation working correctly');
    });
  });

  test.describe('Profile Management', () => {
    
    test.beforeEach(async ({ page }) => {
      await loginUser(page);
      
      // Navigate to profile page
  await page.click('text=个人信息');
      await page.waitForTimeout(1000);
      
      // Check we're on the right page
      const currentUrl = page.url();
      if (!currentUrl.includes('/profile')) {
        throw new Error(`Failed to navigate to profile page. Current URL: ${currentUrl}`);
      }
    });

    test('should display and update profile', async ({ page }) => {
      // Check profile page elements
      await expect(page.locator('text=个人资料')).toBeVisible();
      
      // Check form fields are populated with test user data
      await expect(page.locator(`input[value="${testUser.username}"]`)).toBeVisible();
      await expect(page.locator(`input[value="${testUser.email}"]`)).toBeVisible();
      
      // Update weight
      const weightInput = page.locator('input[placeholder*="体重"]');
      await weightInput.clear();
      await weightInput.fill('70');
      
      // Save changes
      await page.click('button:has-text("保存")');
      
      // Check success message
      await expect(page.locator('.ant-message-success')).toBeVisible();
      
      console.log('✅ Profile updated successfully');
    });
  });

  test.describe('Navigation and Logout', () => {
    
    test.beforeEach(async ({ page }) => {
      await loginUser(page);
    });

    test('should navigate between pages', async ({ page }) => {
      // Test navigation to health records
      await page.click('text=健康记录');
      await page.waitForTimeout(1000);
      await expect(page).toHaveURL(/.*health-records.*/);
      
      // Test navigation back to dashboard
      await page.click('text=仪表盘');
      await page.waitForTimeout(1000);
      await expect(page).toHaveURL(/.*dashboard.*|.*localhost:3000\/$/);
      
      // Test navigation to profile
      await page.click('text=个人资料');
      await page.waitForTimeout(1000);
      await expect(page).toHaveURL(/.*profile.*/);
      
      console.log('✅ Navigation working correctly');
    });

    test('should logout successfully', async ({ page }) => {
      // Find and click logout button (check if it's in a dropdown menu)
      try {
        // Try direct logout button first
        await page.click('text=退出登录');
      } catch {
        // Try dropdown menu
        await page.click('.ant-dropdown-trigger');
        await page.waitForTimeout(500);
        await page.click('text=退出登录');
      }
      
      // Should redirect to login page
      await page.waitForTimeout(2000);
      await expect(page).toHaveURL(/.*login.*/);
      await expect(page.locator('text=请登录您的账户')).toBeVisible();
      
      console.log('✅ Logout successful');
    });
  });
});
