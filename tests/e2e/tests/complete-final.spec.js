/**
 * Complete E2E Test Suite with Full Fixes
 * Generated by Zhuang
 * 
 * This test suite addresses all identified issues:
 * 1. Unique user generation with timestamp
 * 2. Correct page titles and navigation text
 * 3. Proper form submission handling 
 * 4. Modal interaction fixes
 * 5. Comprehensive error handling
 */

const { test, expect } = require('@playwright/test');

// Generated by Zhuang - Helper function for unique test users
function generateTestUser() {
  const timestamp = Date.now();
  return {
    username: `e2e_user_${timestamp}`,
    email: `e2e.test.${timestamp}@example.com`,
    password: 'TestPassword123!',
    age: '25',
    gender: 'male',
    weight: '70'
  };
}

// Generated by Zhuang - Helper function for user login
async function loginUser(page, user) {
  console.log(`Attempting login with: ${user.email}`);
  
  await page.goto('http://localhost:3000/login');
  await page.waitForTimeout(2000);
  
  // Fill login form with correct placeholder texts from Login.js
  await page.fill('input[placeholder="邮箱地址"]', user.email); // Fixed: correct placeholder
  await page.fill('input[placeholder="密码"]', user.password); // Fixed: correct placeholder
  
  // Submit login (robust against spacing like "登 录")
  const loginSubmit = page.locator('button[type="submit"]').filter({ hasText: /登\s?录|登录/ });
  await loginSubmit.first().waitFor({ state: 'visible' });
  await loginSubmit.first().click();
  
  // Wait for redirect to dashboard
  await page.waitForTimeout(3000);
  await expect(page).toHaveURL(/.*dashboard.*|.*localhost:3000\/$/);
  
  console.log('✅ Login successful');
  return true;
}

// Generated by Zhuang - Helper function for user registration  
async function registerUser(page, user) {
  console.log(`Creating test user: ${user.email}`);
  
  await page.goto('http://localhost:3000/register');
  await page.waitForTimeout(2000);
  
  // Fill registration form with correct placeholder texts from Register.js
  await page.fill('input[placeholder="请输入用户名"]', user.username);
  await page.fill('input[placeholder="请输入邮箱地址"]', user.email); // Fixed: correct placeholder
  await page.fill('input[placeholder="请输入密码"]', user.password);
  await page.fill('input[placeholder="请确认密码"]', user.password);
  await page.fill('input[placeholder="年龄"]', user.age); // Fixed: correct placeholder
  
  // Select gender using correct approach - click on dropdown then select option
  await page.click('.ant-select-selector');
  await page.waitForTimeout(500);
  // Use the text content "男" which corresponds to value "M"
  await page.click('text=男');
  await page.waitForTimeout(500);
  
  await page.fill('input[placeholder="体重"]', user.weight); // Fixed: correct placeholder
  
  // Generated by Zhuang - Submit with robust button locator handling Chinese spacing: "注册" or "注 册"
  const regSubmit = page.locator('button[type="submit"]').filter({ hasText: /注\s?册|注册/ });
  await regSubmit.waitFor({ state: 'visible' });
  await regSubmit.click();
  
  // Wait for success and redirect
  await page.waitForTimeout(3000);
  
  console.log('Test user registration completed');
  return true;
}

test.describe('Health Platform Complete E2E Tests', () => {
  
  test.describe('Authentication', () => {
    test('should login successfully', async ({ page }) => {
      const user = generateTestUser();
      await registerUser(page, user);
      await loginUser(page, user);
      console.log('✅ Login test passed');
    });
  });

  test.describe('Dashboard', () => {
    test('should display dashboard statistics', async ({ page }) => {
      const user = generateTestUser();
      await registerUser(page, user);
      await loginUser(page, user);
      
      // Verify dashboard elements - "健康仪表板" is the actual title
  await expect(page.locator('h2:has-text("健康仪表板")')).toBeVisible();
      await expect(page.locator('text=总记录数')).toBeVisible();
      console.log('✅ Dashboard statistics displayed');
    });
  });

  test.describe('Health Records Management', () => {
    
    test('should display health records page', async ({ page }) => {
      const user = generateTestUser();
      await registerUser(page, user);
      await loginUser(page, user);
      
      // Navigate to health records
      await page.click('text=健康记录');
      await page.waitForTimeout(1000);
      
      // Check page elements with correct text - use specific selectors to avoid multiple matches
  await expect(page.locator('h2:has-text("健康记录")')).toBeVisible();
      await expect(page.locator('button:has-text("添加记录")')).toBeVisible();
      
      // Check table headers
      await expect(page.locator('text=时间')).toBeVisible();
      await expect(page.locator('text=血压')).toBeVisible();
      await expect(page.locator('text=心率')).toBeVisible();
    });

    test('should create new health record', async ({ page }) => {
      const user = generateTestUser();
      await registerUser(page, user);
      await loginUser(page, user);
      
      // Navigate to health records
      await page.click('text=健康记录');
      await page.waitForTimeout(1000);
      
      // Click add record button
      await page.click('button:has-text("添加记录")');
      await page.waitForTimeout(1000);
      
      // Fill the form using correct field names from frontend
      const now = new Date();
  await page.fill('input[data-testid="systolic-pressure"]', '120');
  await page.fill('input[data-testid="diastolic-pressure"]', '80');  
  await page.fill('input[data-testid="heart-rate"]', '72');
  await page.fill('textarea[data-testid="notes"]', 'Test record created by E2E');
      
      // Submit form using correct button text - use form submit instead of modal-intercepted click
  // Generated by Zhuang - robust Add button (supports "添 加")
  const modalCF1 = page.locator('.ant-modal');
  await expect(modalCF1).toBeVisible({ timeout: 10000 });
  const addBtnCF1 = modalCF1.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnCF1.first()).toBeVisible({ timeout: 10000 });
  await addBtnCF1.first().click();
      
      // Wait for success message
      await expect(page.locator('.ant-message-success')).toBeVisible({ timeout: 10000 });
      
      // Verify record appears in table
      await expect(page.locator('text=120/80 mmHg')).toBeVisible({ timeout: 5000 });
    });

    test('should edit health record', async ({ page }) => {
      const user = generateTestUser();
      await registerUser(page, user);
      await loginUser(page, user);
      
      // Navigate to health records and create a record first
      await page.click('text=健康记录');
      await page.waitForTimeout(1000);
      
      await page.click('button:has-text("添加记录")');
      await page.waitForTimeout(1000);
      
      const originalData = {
        systolic: '120',
        diastolic: '80', 
        heartRate: '72'
      };
      
      await page.fill('input[data-testid="systolic-pressure"]', originalData.systolic);
      await page.fill('input[data-testid="diastolic-pressure"]', originalData.diastolic);
      await page.fill('input[data-testid="heart-rate"]', originalData.heartRate);
  // Generated by Zhuang - robust Add button
  const modalCF2 = page.locator('.ant-modal');
  await expect(modalCF2).toBeVisible({ timeout: 10000 });
  const addBtnCF2 = modalCF2.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnCF2.first()).toBeVisible({ timeout: 10000 });
  await addBtnCF2.first().click();
      
      // Wait for success
      await expect(page.locator('.ant-message-success')).toBeVisible();
      await page.waitForTimeout(2000);
      
      // Click edit button
  await page.locator('button:has-text("编辑")').first().click();
      await page.waitForTimeout(1000);
      
      // Update values
      await page.fill('input[data-testid="systolic-pressure"]', '130');
      await page.fill('input[data-testid="diastolic-pressure"]', '85');
      
      // Submit update using correct button text for edit mode
  // Generated by Zhuang - robust Update button (supports "更 新")
  const modalEditCF1 = page.locator('.ant-modal');
  await expect(modalEditCF1).toBeVisible({ timeout: 10000 });
  const updateBtnCF1 = modalEditCF1.locator('button[type="submit"]').filter({ hasText: /更\s?新|更新/ });
  await expect(updateBtnCF1.first()).toBeVisible({ timeout: 10000 });
  await updateBtnCF1.first().click();
      
      // Wait for success message
      await expect(page.locator('.ant-message-success')).toBeVisible({ timeout: 10000 });
      
      // Verify updated values
      await expect(page.locator('text=130/85 mmHg')).toBeVisible({ timeout: 5000 });
    });

    test('should delete health record', async ({ page }) => {
      const user = generateTestUser();
      await registerUser(page, user);
      await loginUser(page, user);
      
      // Navigate to health records and create a record first
      await page.click('text=健康记录');
      await page.waitForTimeout(1000);
      
      await page.click('button:has-text("添加记录")');
      await page.waitForTimeout(1000);
      
      const testData = {
        systolic: '115',
        diastolic: '75',
        heartRate: '68'
      };
      
      await page.fill('input[data-testid="systolic-pressure"]', testData.systolic);
      await page.fill('input[data-testid="diastolic-pressure"]', testData.diastolic);
      await page.fill('input[data-testid="heart-rate"]', testData.heartRate);
  // Generated by Zhuang - robust Add button
  const modalCF3 = page.locator('.ant-modal');
  await expect(modalCF3).toBeVisible({ timeout: 10000 });
  const addBtnCF3 = modalCF3.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnCF3.first()).toBeVisible({ timeout: 10000 });
  await addBtnCF3.first().click();
      
      // Wait for success
      await expect(page.locator('.ant-message-success')).toBeVisible();
      await page.waitForTimeout(2000);
      
      // Click delete button and confirm
  await page.click('button:has-text("删除")');
  // Generated by Zhuang - robust Confirm button (supports "确 定")
  const popconfirmCF1 = page.locator('.ant-popconfirm');
  const confirmBtnCF1 = popconfirmCF1.locator('button').filter({ hasText: /确\s?定|确定/ });
  await expect(confirmBtnCF1.first()).toBeVisible({ timeout: 10000 });
  await confirmBtnCF1.first().click();
      
      // Wait for success message
      await expect(page.locator('.ant-message-success')).toBeVisible({ timeout: 10000 });
      
      // Verify record is removed (may show empty state)
      await page.waitForTimeout(2000);
    });

    test('should validate form inputs', async ({ page }) => {
      const user = generateTestUser();
      await registerUser(page, user);
      await loginUser(page, user);
      
      // Navigate to health records
      await page.click('text=健康记录');
      await page.waitForTimeout(1000);
      
      // Click add record
      await page.click('button:has-text("添加记录")');
      await page.waitForTimeout(1000);
      
      // Try to submit empty form
  // Generated by Zhuang - robust Add button
  const modalCF4 = page.locator('.ant-modal');
  await expect(modalCF4).toBeVisible({ timeout: 10000 });
  const addBtnCF4 = modalCF4.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnCF4.first()).toBeVisible({ timeout: 10000 });
  await addBtnCF4.first().click();
      
      // Check validation messages appear
      await expect(page.locator('text=请输入收缩压')).toBeVisible();
      await expect(page.locator('text=请输入舒张压')).toBeVisible();
      
      // Test invalid range
      await page.fill('input[data-testid="systolic-pressure"]', '300');
      await page.fill('input[data-testid="diastolic-pressure"]', '300');
      
  // Generated by Zhuang - robust Add button
  const modalCF5 = page.locator('.ant-modal');
  await expect(modalCF5).toBeVisible({ timeout: 10000 });
  const addBtnCF5 = modalCF5.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnCF5.first()).toBeVisible({ timeout: 10000 });
  await addBtnCF5.first().click();
      await expect(page.locator('text=收缩压范围：50-250 mmHg')).toBeVisible();
    });
  });

  test.describe('Profile Management', () => {
    test('should display and update profile', async ({ page }) => {
      const user = generateTestUser();
      await registerUser(page, user);
      await loginUser(page, user);
      
      // Navigate to profile page using correct navigation text
  await page.click('text=个人信息');
      await page.waitForTimeout(1000);
      
      // Check we're on the right page - use specific selector to avoid multiple matches
      await expect(page.locator('h2:has-text("个人信息")')).toBeVisible();
      
      // Verify profile form elements exist
      const usernameInput = page.locator('input[placeholder*="用户名"], input[value*="' + user.username + '"]');
      await expect(usernameInput.first()).toBeVisible({ timeout: 5000 });
    });
  });

  test.describe('Navigation and Logout', () => {
    test('should navigate between pages', async ({ page }) => {
      const user = generateTestUser();
      await registerUser(page, user);
      await loginUser(page, user);
      
      // Test navigation to health records using correct text
      await page.click('text=健康记录');
      await page.waitForTimeout(1000);
      await expect(page).toHaveURL(/.*health-records.*/);
      
      // Test navigation back to dashboard using correct text  
      await page.click('text=仪表板');
      await page.waitForTimeout(1000);
      await expect(page).toHaveURL(/.*dashboard.*|.*localhost:3000\/$/);
      
      // Test navigation to profile using correct text
      await page.click('text=个人信息');
      await page.waitForTimeout(1000);
      await expect(page).toHaveURL(/.*profile.*/);
    });

    test('should logout successfully', async ({ page }) => {
      const user = generateTestUser();
      await registerUser(page, user);
      await loginUser(page, user);
      
      // Click logout button
      await page.click('button:has-text("退出登录")');
      await page.waitForTimeout(2000);
      
      // Should redirect to login page
      await expect(page).toHaveURL(/.*login.*/);
      console.log('✅ Logout successful');
    });
  });
});
