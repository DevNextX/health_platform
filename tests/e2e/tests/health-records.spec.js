/**
 * Health Records E2E Tests
 * Generated by Zhuang
 */
import { test, expect } from '@playwright/test';

test.describe('Health Records Management', () => {

  // Generated by Zhuang - helper to create a unique test user
  function genUser() {
    const ts = Date.now();
    return {
      username: `e2e_user_${ts}`,
      email: `e2e.user.${ts}@example.com`,
      password: 'TestPassword123!'
    };
  }

  // Generated by Zhuang - register and login flow to avoid dependency on seeded users
  async function registerAndLogin(page) {
    const user = genUser();
    console.log(`Registering test user: ${user.email}`);
    // Register
    await page.goto('/register');
    await page.fill('input[placeholder="请输入用户名"]', user.username);
    await page.fill('input[placeholder="请输入邮箱地址"]', user.email);
    await page.fill('input[placeholder="请输入密码"]', user.password);
    await page.fill('input[placeholder="请确认密码"]', user.password);
    await page.fill('input[placeholder="年龄"]', '28');
    await page.click('.ant-select-selector');
    await page.click('text=男');
    await page.fill('input[placeholder="体重"]', '70');
    // Robust submit: tolerate "注 册" spacing
    const regSubmit = page.locator('form[name="register"] button[type="submit"]').first();
    await regSubmit.waitFor({ state: 'visible' });
    await regSubmit.click();
    // Ignore result toast, go to login
    await page.goto('/login');
  // Login
  console.log(`Logging in with: ${user.email}`);
    await page.fill('input[placeholder="邮箱地址"]', user.email);
    await page.fill('input[placeholder="密码"]', user.password);
    const loginSubmit = page.locator('form[name="login"] button[type="submit"]').first();
    await loginSubmit.waitFor({ state: 'visible' });
    await loginSubmit.click();
    await expect(page).toHaveURL(/.*dashboard.*|.*localhost:3000\/$/);
  }

  test.beforeEach(async ({ page }) => {
    await registerAndLogin(page);
  // Generated by Zhuang: verify header user display is visible
  const headerUser = page.getByTestId('current-user');
  await expect(headerUser).toBeVisible();
    // Navigate to health records page
    await page.click('text=健康记录');
    await expect(page).toHaveURL('/health-records');
  });

  test('should display health records page', async ({ page }) => {
    // Check page title
    await expect(page.locator('h2:has-text("健康记录")')).toBeVisible();
    
    // Check add button exists
    await expect(page.locator('text=添加记录')).toBeVisible();
    
    // Check table headers
    await expect(page.locator('text=时间')).toBeVisible();
    await expect(page.locator('text=血压')).toBeVisible();
    await expect(page.locator('text=心率')).toBeVisible();
    await expect(page.locator('text=操作')).toBeVisible();
  });

  test('should create new health record', async ({ page }) => {
    // Click add button
    await page.click('text=添加记录');
    
    // Fill form using placeholder-based selectors
    await page.fill('input[placeholder="收缩压"]', '120');
    await page.fill('input[placeholder="舒张压"]', '80');
    await page.fill('input[placeholder="心率"]', '72');
  await page.fill('textarea[data-testid="notes"]', 'Test record from Playwright');
    
  // Submit form (scope to modal to avoid background button under mask) - Generated by Zhuang
  const modal1 = page.locator('.ant-modal');
  await expect(modal1).toBeVisible({ timeout: 10000 });
  const addBtnHR1 = modal1.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnHR1.first()).toBeVisible({ timeout: 10000 });
  await addBtnHR1.first().click();
    
    // Check success message
    await expect(page.locator('.ant-message-success')).toBeVisible();
    
    // Verify record appears in table
  await expect(page.locator('text=120/80 mmHg')).toBeVisible();
    await expect(page.locator('text=72')).toBeVisible();
  });

  test('should filter by Chinese tag using exact-match OR semantics', async ({ page }) => {
    // Create two records with different Chinese tags
    await page.click('text=添加记录');
    await page.fill('input[placeholder="收缩压"]', '118');
    await page.fill('input[placeholder="舒张压"]', '76');
    const modalA = page.locator('.ant-modal');
    await expect(modalA).toBeVisible({ timeout: 10000 });
    // Open tag selector and add tag "餐后"
    await modalA.click('.ant-select');
    await page.click('.ant-select-item[title="餐后"]');
    await modalA.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ }).first().click();
    await expect(page.locator('.ant-message-success')).toBeVisible();

    await page.click('text=添加记录');
    await page.fill('input[placeholder="收缩压"]', '122');
    await page.fill('input[placeholder="舒张压"]', '78');
    const modalB = page.locator('.ant-modal');
    await expect(modalB).toBeVisible({ timeout: 10000 });
    await modalB.click('.ant-select');
    await page.click('.ant-select-item[title="运动后"]');
    await modalB.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ }).first().click();
    await expect(page.locator('.ant-message-success')).toBeVisible();

  // Use inline TagSelector to choose two tags (OR semantics)
  const tagFilter = page.locator('[data-testid="filter-tags"]');
  await tagFilter.click();
  await page.click('.ant-select-item[title="餐后"]');
  await tagFilter.click();
  await page.click('.ant-select-item[title="运动后"]');

    // Expect at least 2 rows and visible tag chips
    await expect(page.locator('.ant-table-tbody tr')).toHaveCount(2);
    await expect(page.locator('.ant-tag:has-text("餐后")')).toBeVisible();
    await expect(page.locator('.ant-tag:has-text("运动后")')).toBeVisible();
  });

  test('should edit existing health record', async ({ page }) => {
    // First create a record
    await page.click('text=添加记录');
    await page.fill('input[placeholder="收缩压"]', '110');
    await page.fill('input[placeholder="舒张压"]', '70');
    await page.fill('input[placeholder="心率"]', '65');
  // Generated by Zhuang - robust Add button scoped to modal
  const modal2 = page.locator('.ant-modal');
  await expect(modal2).toBeVisible({ timeout: 10000 });
  const addBtnHR2 = modal2.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnHR2.first()).toBeVisible({ timeout: 10000 });
  await addBtnHR2.first().click();
    
    // Wait for success and close modal
    await expect(page.locator('.ant-message-success')).toBeVisible();
    
    // Click edit button for the record
  await page.locator('button:has-text("编辑")').first().click();
    
    // Update values
    await page.fill('input[placeholder="收缩压"]', '125');
    await page.fill('input[placeholder="舒张压"]', '85');
    
    // Submit changes
  // Generated by Zhuang - robust Update button scoped to modal (supports "更 新")
  const modalEdit = page.locator('.ant-modal');
  await expect(modalEdit).toBeVisible({ timeout: 10000 });
  const updateBtnHR1 = modalEdit.locator('button[type="submit"]').filter({ hasText: /更\s?新|更新/ });
  await expect(updateBtnHR1.first()).toBeVisible({ timeout: 10000 });
  await updateBtnHR1.first().click();
    
    // Check success message
    await expect(page.locator('.ant-message-success')).toBeVisible();
    
    // Verify updated values
    await expect(page.locator('text=125/85')).toBeVisible();
  });

  test('should delete health record', async ({ page }) => {
    // First create a record
    await page.click('text=添加记录');
    await page.fill('input[placeholder="收缩压"]', '100');
    await page.fill('input[placeholder="舒张压"]', '60');
  // Generated by Zhuang - robust Add button scoped to modal
  const modal3 = page.locator('.ant-modal');
  await expect(modal3).toBeVisible({ timeout: 10000 });
  const addBtnHR3 = modal3.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnHR3.first()).toBeVisible({ timeout: 10000 });
  await addBtnHR3.first().click();
    
    // Wait for success
    await expect(page.locator('.ant-message-success')).toBeVisible();
    
    // Click delete button
    await page.locator('button:has-text("删除")').first().click();
    
    // Confirm deletion
  // Generated by Zhuang - robust Confirm button scoped to popconfirm (supports "确 定")
  const popconfirm = page.locator('.ant-popconfirm');
  const confirmBtnHR1 = popconfirm.locator('button').filter({ hasText: /确\s?定|确定/ });
  await expect(confirmBtnHR1.first()).toBeVisible({ timeout: 10000 });
  await confirmBtnHR1.first().click();
    
    // Check success message
    await expect(page.locator('.ant-message-success')).toBeVisible();
    
    // Verify record is removed
    await expect(page.locator('text=100/60')).not.toBeVisible();
  });

  test('should filter records by date range (inline)', async ({ page }) => {
    // Set date range (last 7 days) using inline picker
    const today = new Date();
    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);

    const datePicker = page.locator('[data-testid="filter-date-range"]');
    await datePicker.click();
    await page.locator(`.ant-picker-cell-inner:has-text("${weekAgo.getDate()}")`).first().click();
    await page.locator(`.ant-picker-cell-inner:has-text("${today.getDate()}")`).last().click();

    // Verify table updates (new user typically has 0 records in date window)
    await expect(page.locator('.ant-table-tbody tr')).toHaveCount(0);
  });

  test('should validate form inputs', async ({ page }) => {
    // Click add button
    await page.click('text=添加记录');
    
    // Try to submit empty form
  // Generated by Zhuang - robust Add button scoped to modal
  const modal4 = page.locator('.ant-modal');
  await expect(modal4).toBeVisible({ timeout: 10000 });
  const addBtnHR4 = modal4.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnHR4.first()).toBeVisible({ timeout: 10000 });
  await addBtnHR4.first().click();
    
    // Check validation messages
    await expect(page.locator('text=请输入收缩压')).toBeVisible();
    await expect(page.locator('text=请输入舒张压')).toBeVisible();
    
    // Test invalid values
    await page.fill('input[placeholder="收缩压"]', '300'); // Out of range
    await page.fill('input[placeholder="舒张压"]', '30');  // Out of range
  // Generated by Zhuang - robust Add button scoped to modal
  const modal5 = page.locator('.ant-modal');
  await expect(modal5).toBeVisible({ timeout: 10000 });
  const addBtnHR5 = modal5.locator('button[type="submit"]').filter({ hasText: /添\s?加|添加/ });
  await expect(addBtnHR5.first()).toBeVisible({ timeout: 10000 });
  await addBtnHR5.first().click();
    
    // Check validation messages for out of range values
  await expect(page.locator('text=收缩压范围：50-250 mmHg')).toBeVisible();
  await expect(page.locator('text=舒张压范围：50-250 mmHg')).toBeVisible();
  });
});
