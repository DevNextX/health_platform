"""
Test cases for health record endpoints. Generated by Zhuang
"""
import json
import pytest
from datetime import datetime


class TestHealthEndpoints:
    """Test health record related endpoints"""
    
    def test_create_health_record(self, client, auth_headers):
        """Test creating a new health record"""
        access_headers = auth_headers['access']
        
        record_data = {
            'systolic': 120,
            'diastolic': 80,
            'heart_rate': 72,
            'timestamp': '2025-08-22T10:00:00Z',
            'tags': ['morning', 'resting'],
            'note': 'Morning measurement'
        }
        
        response = client.post('/api/v1/health', json=record_data, headers=access_headers)
        assert response.status_code == 201
        
        data = response.get_json()
        assert data['systolic'] == 120
        assert data['diastolic'] == 80
        assert data['heart_rate'] == 72
        assert data['tags'] == ['morning', 'resting']
        assert data['note'] == 'Morning measurement'
        assert 'id' in data
        assert 'created_at' in data
    
    def test_create_health_record_unauthorized(self, client):
        """Test creating health record without authorization"""
        record_data = {
            'systolic': 120,
            'diastolic': 80,
            'heart_rate': 72
        }
        
        response = client.post('/api/v1/health', json=record_data)
        assert response.status_code == 401
    
    def test_create_health_record_missing_fields(self, client, auth_headers):
        """Test creating health record with missing required fields"""
        access_headers = auth_headers['access']
        
        record_data = {
            'systolic': 120
            # Missing diastolic and heart_rate
        }
        
        response = client.post('/api/v1/health', json=record_data, headers=access_headers)
        assert response.status_code == 400
    
    def test_list_health_records(self, client, auth_headers):
        """Test listing health records"""
        access_headers = auth_headers['access']
        
        # Create a few records first
        records = [
            {'systolic': 120, 'diastolic': 80, 'heart_rate': 72, 'tags': ['morning']},
            {'systolic': 130, 'diastolic': 85, 'heart_rate': 75, 'tags': ['evening']},
            {'systolic': 125, 'diastolic': 82, 'heart_rate': 70, 'tags': ['afternoon']}
        ]
        
        for record in records:
            client.post('/api/v1/health', json=record, headers=access_headers)
        
        # Test listing all records
        response = client.get('/api/v1/health', headers=access_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert 'records' in data
        assert 'pagination' in data
        assert len(data['records']) == 3
    
    def test_list_health_records_pagination(self, client, auth_headers):
        """Test health records pagination"""
        access_headers = auth_headers['access']
        
        # Create multiple records
        for i in range(25):
            record = {
                'systolic': 120 + i,
                'diastolic': 80,
                'heart_rate': 72,
                'tags': [f'test{i}']
            }
            client.post('/api/v1/health', json=record, headers=access_headers)
        
        # Test first page
        response = client.get('/api/v1/health?page=1&size=10', headers=access_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert len(data['records']) == 10
        assert data['pagination']['page'] == 1
        assert data['pagination']['size'] == 10
        assert data['pagination']['total'] == 25
        assert data['pagination']['pages'] == 3
        
        # Test second page
        response = client.get('/api/v1/health?page=2&size=10', headers=access_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert len(data['records']) == 10
        assert data['pagination']['page'] == 2
    
    def test_list_health_records_filter_by_tags(self, client, auth_headers):
        """Test filtering health records by tags"""
        access_headers = auth_headers['access']
        
        # Create records with different tags
        records = [
            {'systolic': 120, 'diastolic': 80, 'heart_rate': 72, 'tags': ['morning', 'home']},
            {'systolic': 130, 'diastolic': 85, 'heart_rate': 75, 'tags': ['evening', 'work']},
            {'systolic': 125, 'diastolic': 82, 'heart_rate': 70, 'tags': ['morning', 'gym']}
        ]
        
        for record in records:
            client.post('/api/v1/health', json=record, headers=access_headers)
        
        # Filter by 'morning' tag
        response = client.get('/api/v1/health?tags=morning', headers=access_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert len(data['records']) == 2
        for record in data['records']:
            assert 'morning' in record['tags']

        # Generated by Zhuang: Filter by multiple tags should use OR semantics
        response = client.get('/api/v1/health?tags=morning,work', headers=access_headers)
        assert response.status_code == 200
        data = response.get_json()
        # morning matches 2, work matches 1, but one record may overlap; in our dataset it's 3 total
        assert len(data['records']) == 3
        # Ensure each record has at least one of the requested tags
        for record in data['records']:
            assert any(t in record['tags'] for t in ['morning', 'work'])
    
    def test_get_health_record(self, client, auth_headers):
        """Test getting a specific health record"""
        access_headers = auth_headers['access']
        
        # Create a record first
        record_data = {
            'systolic': 120,
            'diastolic': 80,
            'heart_rate': 72,
            'note': 'Test record'
        }
        
        create_response = client.post('/api/v1/health', json=record_data, headers=access_headers)
        record_id = create_response.get_json()['id']
        
        # Get the specific record
        response = client.get(f'/api/v1/health/{record_id}', headers=access_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert data['id'] == record_id
        assert data['systolic'] == 120
        assert data['note'] == 'Test record'
    
    def test_get_health_record_not_found(self, client, auth_headers):
        """Test getting non-existent health record"""
        access_headers = auth_headers['access']
        
        response = client.get('/api/v1/health/999', headers=access_headers)
        assert response.status_code == 404
    
    def test_update_health_record(self, client, auth_headers):
        """Test updating a health record"""
        access_headers = auth_headers['access']
        
        # Create a record first
        record_data = {
            'systolic': 120,
            'diastolic': 80,
            'heart_rate': 72,
            'note': 'Original note'
        }
        
        create_response = client.post('/api/v1/health', json=record_data, headers=access_headers)
        record_id = create_response.get_json()['id']
        
        # Update the record
        update_data = {
            'systolic': 125,
            'note': 'Updated note'
        }
        
        response = client.put(f'/api/v1/health/{record_id}', json=update_data, headers=access_headers)
        assert response.status_code == 200
        
        data = response.get_json()
        assert data['systolic'] == 125
        assert data['diastolic'] == 80  # Should remain unchanged
        assert data['note'] == 'Updated note'
    
    def test_delete_health_record(self, client, auth_headers):
        """Test deleting a health record"""
        access_headers = auth_headers['access']
        
        # Create a record first
        record_data = {
            'systolic': 120,
            'diastolic': 80,
            'heart_rate': 72
        }
        
        create_response = client.post('/api/v1/health', json=record_data, headers=access_headers)
        record_id = create_response.get_json()['id']
        
        # Delete the record
        response = client.delete(f'/api/v1/health/{record_id}', headers=access_headers)
        assert response.status_code == 200
        
        # Verify it's deleted
        get_response = client.get(f'/api/v1/health/{record_id}', headers=access_headers)
        assert get_response.status_code == 404
    
    def test_health_record_ownership(self, client, auth_headers):
        """Test that users can only access their own health records"""
        access_headers = auth_headers['access']
        
        # Create a record with first user
        record_data = {
            'systolic': 120,
            'diastolic': 80,
            'heart_rate': 72
        }
        
        create_response = client.post('/api/v1/health', json=record_data, headers=access_headers)
        record_id = create_response.get_json()['id']
        
        # Create a second user
        client.post('/api/v1/auth/register', json={
            'username': 'user2',
            'email': 'user2@example.com',
            'password': 'password123'
        })
        
        # Login as second user
        login_response = client.post('/api/v1/auth/login', json={
            'email': 'user2@example.com',
            'password': 'password123'
        })
        
        user2_token = login_response.get_json()['access_token']
        user2_headers = {'Authorization': f'Bearer {user2_token}'}
        
        # Second user should not be able to access first user's record
        response = client.get(f'/api/v1/health/{record_id}', headers=user2_headers)
        assert response.status_code == 404  # Or 403, depending on implementation
    
    def test_blood_pressure_validation_create(self, client, auth_headers):
        """Test blood pressure range validation (50-250) when creating records"""
        access_headers = auth_headers['access']
        
        # Test valid blood pressure values within range
        valid_data = {
            'systolic': 120,
            'diastolic': 80,
            'heart_rate': 72
        }
        response = client.post('/api/v1/health', json=valid_data, headers=access_headers)
        assert response.status_code == 201
        
        # Test valid boundary values
        boundary_data = {
            'systolic': 50,
            'diastolic': 250,
            'heart_rate': 72
        }
        response = client.post('/api/v1/health', json=boundary_data, headers=access_headers)
        assert response.status_code == 201
        
        # Test systolic too low
        invalid_data = {
            'systolic': 49,
            'diastolic': 80,
            'heart_rate': 72
        }
        response = client.post('/api/v1/health', json=invalid_data, headers=access_headers)
        assert response.status_code == 422
        data = response.get_json()
        assert 'Blood pressure out of range (50-250)' in data['message']
        
        # Test systolic too high
        invalid_data = {
            'systolic': 251,
            'diastolic': 80,
            'heart_rate': 72
        }
        response = client.post('/api/v1/health', json=invalid_data, headers=access_headers)
        assert response.status_code == 422
        data = response.get_json()
        assert 'Blood pressure out of range (50-250)' in data['message']
        
        # Test diastolic too low
        invalid_data = {
            'systolic': 120,
            'diastolic': 49,
            'heart_rate': 72
        }
        response = client.post('/api/v1/health', json=invalid_data, headers=access_headers)
        assert response.status_code == 422
        data = response.get_json()
        assert 'Blood pressure out of range (50-250)' in data['message']
        
        # Test diastolic too high
        invalid_data = {
            'systolic': 120,
            'diastolic': 251,
            'heart_rate': 72
        }
        response = client.post('/api/v1/health', json=invalid_data, headers=access_headers)
        assert response.status_code == 422
        data = response.get_json()
        assert 'Blood pressure out of range (50-250)' in data['message']
    
    def test_blood_pressure_validation_update(self, client, auth_headers):
        """Test blood pressure range validation (50-250) when updating records"""
        access_headers = auth_headers['access']
        
        # Create a valid record first
        record_data = {
            'systolic': 120,
            'diastolic': 80,
            'heart_rate': 72
        }
        create_response = client.post('/api/v1/health', json=record_data, headers=access_headers)
        record_id = create_response.get_json()['id']
        
        # Test valid update within range
        valid_update = {'systolic': 130}
        response = client.put(f'/api/v1/health/{record_id}', json=valid_update, headers=access_headers)
        assert response.status_code == 200
        
        # Test valid boundary update
        boundary_update = {'diastolic': 250}
        response = client.put(f'/api/v1/health/{record_id}', json=boundary_update, headers=access_headers)
        assert response.status_code == 200
        
        # Test invalid systolic update (too low)
        invalid_update = {'systolic': 49}
        response = client.put(f'/api/v1/health/{record_id}', json=invalid_update, headers=access_headers)
        assert response.status_code == 422
        data = response.get_json()
        assert 'Blood pressure out of range (50-250)' in data['message']
        
        # Test invalid systolic update (too high)
        invalid_update = {'systolic': 251}
        response = client.put(f'/api/v1/health/{record_id}', json=invalid_update, headers=access_headers)
        assert response.status_code == 422
        data = response.get_json()
        assert 'Blood pressure out of range (50-250)' in data['message']
        
        # Test invalid diastolic update (too low)
        invalid_update = {'diastolic': 49}
        response = client.put(f'/api/v1/health/{record_id}', json=invalid_update, headers=access_headers)
        assert response.status_code == 422
        data = response.get_json()
        assert 'Blood pressure out of range (50-250)' in data['message']
        
        # Test invalid diastolic update (too high)
        invalid_update = {'diastolic': 251}
        response = client.put(f'/api/v1/health/{record_id}', json=invalid_update, headers=access_headers)
        assert response.status_code == 422
        data = response.get_json()
        assert 'Blood pressure out of range (50-250)' in data['message']
