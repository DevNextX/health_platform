/**
 * Authentication utilities
 * Generated by Zhuang
 */

export const getToken = () => {
  return localStorage.getItem('access_token');
};

export const getRefreshToken = () => {
  return localStorage.getItem('refresh_token');
};

export const setTokens = (accessToken, refreshToken) => {
  localStorage.setItem('access_token', accessToken);
  localStorage.setItem('refresh_token', refreshToken);
};

export const clearTokens = () => {
  localStorage.removeItem('access_token');
  localStorage.removeItem('refresh_token');
};

export const isAuthenticated = () => {
  const token = getToken();
  if (!token) return false;
  try {
    // JWT uses base64url encoding (no padding, -_/). Normalize then decode.
    const b64 = token.split('.')[1];
    if (!b64) return false;
    // base64url -> base64
    let base64 = b64.replace(/-/g, '+').replace(/_/g, '/');
    // add padding
    const pad = base64.length % 4;
    if (pad) base64 += '='.repeat(4 - pad);
    const json = atob(base64);
    const payload = JSON.parse(json);
    const currentTime = Date.now() / 1000;
    return payload.exp && payload.exp > currentTime;
  } catch (error) {
    return false;
  }
};

export const getUserIdFromToken = () => {
  const token = getToken();
  if (!token) return null;
  try {
    const b64 = token.split('.')[1];
    if (!b64) return null;
    let base64 = b64.replace(/-/g, '+').replace(/_/g, '/');
    const pad = base64.length % 4;
    if (pad) base64 += '='.repeat(4 - pad);
    const json = atob(base64);
    const payload = JSON.parse(json);
    return payload.sub || payload.identity || null;
  } catch (error) {
    return null;
  }
};
