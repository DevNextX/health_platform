/**
 * Family Members Management Page Component
 * Generated by Zhuang
 */
import React, { useState, useEffect, useCallback } from 'react';
import {
  Card,
  Button,
  Table,
  Modal,
  Form,
  Input,
  InputNumber,
  Select,
  Space,
  message,
  Popconfirm,
  Row,
  Col,
  Typography,
  Tag,
} from 'antd';
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  TeamOutlined,
} from '@ant-design/icons';
import { familyAPI } from '../services/api';

const { Title } = Typography;
const { Option } = Select;

const FamilyMembers = () => {
  const [members, setMembers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [editingMember, setEditingMember] = useState(null);
  const [form] = Form.useForm();

  const fetchMembers = useCallback(async () => {
    try {
      setLoading(true);
      const response = await familyAPI.getMembers();
      const data = response.data;
      setMembers(data.members || []);
    } catch (error) {
      console.error('Failed to fetch family members:', error);
      message.error('获取家庭成员失败');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchMembers();
  }, [fetchMembers]);

  const handleAdd = () => {
    setEditingMember(null);
    form.resetFields();
    setModalVisible(true);
  };

  const handleEdit = (member) => {
    setEditingMember(member);
    form.setFieldsValue({
      name: member.name,
      gender: member.gender,
      age: member.age,
      height: member.height,
      weight: member.weight,
    });
    setModalVisible(true);
  };

  const handleDelete = async (memberId) => {
    try {
      await familyAPI.deleteMember(memberId);
      message.success('删除成功');
      fetchMembers();
    } catch (error) {
      console.error('Failed to delete member:', error);
      const errorMessage = error.response?.data?.message || '删除失败';
      message.error(errorMessage);
    }
  };

  const handleSubmit = async (values) => {
    try {
      const memberData = {
        name: values.name,
        gender: values.gender,
        age: values.age,
        height: values.height,
        weight: values.weight,
      };

      if (editingMember) {
        await familyAPI.updateMember(editingMember.id, memberData);
        message.success('更新成功');
      } else {
        await familyAPI.createMember(memberData);
        message.success('添加成功');
      }

      setModalVisible(false);
      fetchMembers();
    } catch (error) {
      console.error('Failed to save member:', error);
      const errorMessage = error.response?.data?.message || '保存失败';
      message.error(errorMessage);
    }
  };

  const getGenderText = (gender) => {
    switch (gender) {
      case 'M':
        return '男';
      case 'F':
        return '女';
      default:
        return gender || '-';
    }
  };

  const columns = [
    {
      title: '姓名',
      dataIndex: 'name',
      key: 'name',
      render: (name, record) => (
        <Space>
          {name}
          {record.is_self && <Tag color="blue">本人</Tag>}
        </Space>
      ),
    },
    {
      title: '性别',
      dataIndex: 'gender',
      key: 'gender',
      render: (gender) => getGenderText(gender),
    },
    {
      title: '年龄',
      dataIndex: 'age',
      key: 'age',
      render: (age) => age ? `${age} 岁` : '-',
    },
    {
      title: '身高',
      dataIndex: 'height',
      key: 'height',
      render: (height) => height ? `${height} cm` : '-',
    },
    {
      title: '体重',
      dataIndex: 'weight',
      key: 'weight',
      render: (weight) => weight ? `${weight} kg` : '-',
    },
    {
      title: '操作',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Button
            type="text"
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
          >
            编辑
          </Button>
          {!record.is_self && (
            <Popconfirm
              title="确定要删除这个家庭成员吗？"
              description="如果该成员有健康记录，将进行软删除以保留历史数据。"
              onConfirm={() => handleDelete(record.id)}
              okText="确定"
              cancelText="取消"
            >
              <Button
                type="text"
                danger
                icon={<DeleteOutlined />}
              >
                删除
              </Button>
            </Popconfirm>
          )}
        </Space>
      ),
    },
  ];

  return (
    <div>
      <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Title level={2}>
          <TeamOutlined style={{ marginRight: 8 }} />
          家庭成员管理
        </Title>
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={handleAdd}
        >
          添加成员
        </Button>
      </div>

      <Card>
        <Table
          columns={columns}
          dataSource={members}
          rowKey="id"
          loading={loading}
          pagination={false}
          size="middle"
        />
      </Card>

      <Modal
        title={editingMember ? '编辑家庭成员' : '添加家庭成员'}
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
        width={600}
      >
        <Form
          form={form}
          onFinish={handleSubmit}
          layout="vertical"
          style={{ marginTop: 16 }}
        >
          <Row gutter={16}>
            <Col xs={24} sm={12}>
              <Form.Item
                name="name"
                label="姓名"
                rules={[
                  { required: true, message: '请输入姓名' },
                  { max: 50, message: '姓名不能超过50个字符' }
                ]}
              >
                <Input placeholder="请输入姓名" />
              </Form.Item>
            </Col>
            <Col xs={24} sm={12}>
              <Form.Item
                name="gender"
                label="性别"
              >
                <Select placeholder="请选择性别" allowClear>
                  <Option value="M">男</Option>
                  <Option value="F">女</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col xs={24} sm={8}>
              <Form.Item
                name="age"
                label="年龄"
                rules={[
                  { type: 'number', min: 0, max: 150, message: '年龄必须在0-150之间' }
                ]}
              >
                <InputNumber
                  placeholder="年龄"
                  style={{ width: '100%' }}
                  min={0}
                  max={150}
                />
              </Form.Item>
            </Col>
            <Col xs={24} sm={8}>
              <Form.Item
                name="height"
                label="身高 (cm)"
                rules={[
                  { type: 'number', min: 0, max: 300, message: '身高必须在0-300cm之间' }
                ]}
              >
                <InputNumber
                  placeholder="身高"
                  style={{ width: '100%' }}
                  min={0}
                  max={300}
                  step={0.1}
                />
              </Form.Item>
            </Col>
            <Col xs={24} sm={8}>
              <Form.Item
                name="weight"
                label="体重 (kg)"
                rules={[
                  { type: 'number', min: 0, max: 500, message: '体重必须在0-500kg之间' }
                ]}
              >
                <InputNumber
                  placeholder="体重"
                  style={{ width: '100%' }}
                  min={0}
                  max={500}
                  step={0.1}
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item style={{ marginTop: 24, marginBottom: 0, textAlign: 'right' }}>
            <Space>
              <Button onClick={() => setModalVisible(false)}>
                取消
              </Button>
              <Button type="primary" htmlType="submit">
                {editingMember ? '更新' : '添加'}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default FamilyMembers;