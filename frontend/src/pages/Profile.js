/**
 * Profile Page Component
 * Generated by Zhuang
 */
import React, { useState, useEffect, useCallback } from 'react';
import {
  Card,
  Form,
  Input,
  InputNumber,
  Select,
  Button,
  Typography,
  Space,
  message,
  Row,
  Col,
  Avatar,
  Divider,
} from 'antd';
import { UserOutlined, MailOutlined, SaveOutlined } from '@ant-design/icons';
import { userAPI } from '../services/api';
import { getUserIdFromToken } from '../utils/auth';

const { Title, Text } = Typography;
const { Option } = Select;

const Profile = () => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [userInfo, setUserInfo] = useState(null);

  const fetchUserInfo = useCallback(async () => {
    try {
      setLoading(true);
      const userId = getUserIdFromToken();
      if (!userId) {
        message.error('无法获取用户信息');
        return;
      }

      const response = await userAPI.getProfile(userId);
      const user = response.data;
      setUserInfo(user);
      
      // Set form values
      form.setFieldsValue({
        username: user.username,
        email: user.email,
        age: user.age,
        gender: user.gender,
        weight: user.weight,
      });
    } catch (error) {
      console.error('Failed to fetch user info:', error);
      message.error('获取用户信息失败');
    } finally {
      setLoading(false);
    }
  }, [form]); // Generated by Zhuang

  useEffect(() => {
    fetchUserInfo();
  }, [fetchUserInfo]);

  const handleSubmit = async (values) => {
    try {
      setSaving(true);
      const userId = getUserIdFromToken();
      if (!userId) {
        message.error('无法获取用户信息');
        return;
      }

      await userAPI.updateProfile(userId, values);
      message.success('个人信息更新成功');
      
      // Refresh user info
      await fetchUserInfo();
    } catch (error) {
      console.error('Failed to update profile:', error);
      const errorMessage = error.response?.data?.message || '更新失败';
      message.error(errorMessage);
    } finally {
      setSaving(false);
    }
  };

  const getGenderText = (gender) => {
    switch (gender) {
      case 'M': return '男';
      case 'F': return '女';
      case 'O': return '其他';
      default: return '未设置';
    }
  };

  if (loading) {
    return (
      <Card loading={loading}>
        <div style={{ height: 400 }} />
      </Card>
    );
  }

  return (
    <div>
      <div style={{ marginBottom: 24 }}>
        <Title level={2}>个人信息</Title>
      </div>

      <Row gutter={24}>
        <Col xs={24} lg={8}>
          <Card title="基本信息" style={{ marginBottom: 24 }}>
            <div style={{ textAlign: 'center', marginBottom: 24 }}>
              <Avatar size={80} icon={<UserOutlined />} />
              <div style={{ marginTop: 16 }}>
                <Title level={4} style={{ marginBottom: 4 }}>
                  {userInfo?.username}
                </Title>
                <Text type="secondary">{userInfo?.email}</Text>
              </div>
            </div>
            
            <Divider />
            
            <Space direction="vertical" style={{ width: '100%' }}>
              <div>
                <Text strong>用户名：</Text>
                <Text>{userInfo?.username}</Text>
              </div>
              <div>
                <Text strong>邮箱：</Text>
                <Text>{userInfo?.email}</Text>
              </div>
              <div>
                <Text strong>年龄：</Text>
                <Text>{userInfo?.age || '未设置'}</Text>
              </div>
              <div>
                <Text strong>性别：</Text>
                <Text>{getGenderText(userInfo?.gender)}</Text>
              </div>
              <div>
                <Text strong>体重：</Text>
                <Text>{userInfo?.weight ? `${userInfo.weight} kg` : '未设置'}</Text>
              </div>
              <div>
                <Text strong>注册时间：</Text>
                <Text>
                  {userInfo?.created_at ? 
                    new Date(userInfo.created_at).toLocaleDateString('zh-CN') : 
                    '未知'
                  }
                </Text>
              </div>
            </Space>
          </Card>
        </Col>

        <Col xs={24} lg={16}>
          <Card title="编辑信息">
            <Form
              form={form}
              layout="vertical"
              onFinish={handleSubmit}
            >
              <Row gutter={16}>
                <Col span={24}>
                  <Form.Item
                    name="username"
                    label="用户名"
                    rules={[
                      { required: true, message: '请输入用户名' },
                      { min: 2, message: '用户名至少2个字符' }
                    ]}
                  >
                    <Input
                      prefix={<UserOutlined />}
                      placeholder="请输入用户名"
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Row gutter={16}>
                <Col span={24}>
                  <Form.Item
                    name="email"
                    label="邮箱地址"
                    rules={[
                      { required: true, message: '请输入邮箱地址' },
                      { type: 'email', message: '请输入有效的邮箱地址' }
                    ]}
                  >
                    <Input
                      prefix={<MailOutlined />}
                      placeholder="请输入邮箱地址"
                      disabled // Email should not be editable to maintain auth integrity
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="age"
                    label="年龄"
                    rules={[
                      { type: 'number', min: 1, max: 120, message: '请输入有效年龄' }
                    ]}
                  >
                    <InputNumber
                      placeholder="年龄"
                      style={{ width: '100%' }}
                      min={1}
                      max={120}
                    />
                  </Form.Item>
                </Col>

                <Col xs={24} sm={12}>
                  <Form.Item
                    name="gender"
                    label="性别"
                  >
                    <Select placeholder="请选择性别">
                      <Option value="M">男</Option>
                      <Option value="F">女</Option>
                      <Option value="O">其他</Option>
                    </Select>
                  </Form.Item>
                </Col>
              </Row>

              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="weight"
                    label="体重 (kg)"
                    rules={[
                      { type: 'number', min: 1, max: 500, message: '请输入有效体重' }
                    ]}
                  >
                    <InputNumber
                      placeholder="体重"
                      style={{ width: '100%' }}
                      min={1}
                      max={500}
                      step={0.1}
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item>
                <Button
                  type="primary"
                  htmlType="submit"
                  loading={saving}
                  icon={<SaveOutlined />}
                  size="large"
                >
                  保存更改
                </Button>
              </Form.Item>
            </Form>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default Profile;
