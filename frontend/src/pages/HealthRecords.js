/**
 * Health Records Page Component
 * Generated by Zhuang
 */
import React, { useState, useEffect, useCallback } from 'react';
import {
  Card,
  Button,
  Table,
  Modal,
  Form,
  Input,
  InputNumber,
  DatePicker,
  Tag,
  Space,
  message,
  Popconfirm,
  Row,
  Col,
  Typography,
} from 'antd';
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  DownloadOutlined,
} from '@ant-design/icons';
import dayjs from 'dayjs';
import { healthAPI } from '../services/api';
import { useMember } from '../context/MemberContext';
import TagSelector from '../components/TagSelector';
import { tagValueToLabel } from '../utils/tagI18n';
import { useTranslation } from 'react-i18next';

const { TextArea } = Input;
const { Title } = Typography;

const HealthRecords = () => {
  const { t } = useTranslation();
  const [records, setRecords] = useState([]);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [editingRecord, setEditingRecord] = useState(null);
  const [form] = Form.useForm();
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0,
  });
  const { selectedMemberId } = useMember();
  const [filters, setFilters] = useState({
    tags: [],
    dateRange: null,
  });
  // Generated by Zhuang: dynamic tag options
  const [tagOptions, setTagOptions] = useState([]);

  const fetchRecords = useCallback(async () => {
    try {
      setLoading(true);
      
      const params = {
        page: pagination.current,
        size: pagination.pageSize, // Generated by Zhuang: backend expects 'size'
      };

      if (filters.tags.length) {
        params.tags = filters.tags.join(',');
      }

      if (filters.dateRange) {
        params.date_from = filters.dateRange[0].startOf('day').toDate().toISOString();
        params.date_to = filters.dateRange[1].endOf('day').toDate().toISOString();
      }

  if (selectedMemberId !== undefined && selectedMemberId !== null) {
        params.subject_member_id = selectedMemberId;
      }

  const response = await healthAPI.getRecords(params);
      const data = response.data;

      setRecords(data.records || []);
  // Generated by Zhuang: collect unique tags from current page
  const uniq = new Set();
  (data.records || []).forEach(r => (r.tags || []).forEach(t => uniq.add(t)));
  setTagOptions(prev => Array.from(new Set([...(prev || []), ...Array.from(uniq)])));
      // Only update when total actually changes to avoid unnecessary re-renders
      setPagination(prev => {
        const newTotal = data.pagination?.total || 0;
        if (prev.total === newTotal) return prev;
        return { ...prev, total: newTotal };
      });
    } catch (error) {
      console.error('Failed to fetch records:', error);
  message.error(t('health.messages.loadFail'));
    } finally {
      setLoading(false);
    }
  }, [pagination, filters, selectedMemberId, t]); // Generated by Zhuang

  // Generated by Zhuang: also fetch a larger set once per member change
  useEffect(() => {
    const fetchAllForMember = async () => {
      try {
        const params = { page: 1, size: 1000 };
        if (selectedMemberId !== undefined && selectedMemberId !== null) {
          params.subject_member_id = selectedMemberId;
        }
        const resp = await healthAPI.getRecords(params);
        const uniq = new Set();
        (resp.data?.records || []).forEach(r => (r.tags || []).forEach(t => uniq.add(t)));
        setTagOptions(Array.from(uniq));
      } catch (e) {
        // ignore
      }
    };
    fetchAllForMember();
  }, [selectedMemberId]);

  useEffect(() => {
    fetchRecords();
  }, [fetchRecords]);

  const handleAdd = () => {
  setEditingRecord(null);
    form.resetFields();
    form.setFieldsValue({
      timestamp: dayjs(),
    });
    setModalVisible(true);
  };

  const handleEdit = (record) => {
    setEditingRecord(record);
    form.setFieldsValue({
      systolic_pressure: record.systolic,
      diastolic_pressure: record.diastolic,
      heart_rate: record.heart_rate,
      timestamp: dayjs(record.timestamp),
      tags: record.tags || [],
      notes: record.note,
    });
    setModalVisible(true);
  };

  const handleDelete = async (recordId) => {
    try {
      await healthAPI.deleteRecord(recordId);
      message.success(t('health.messages.deleteSuccess'));
      fetchRecords();
    } catch (error) {
      console.error('Failed to delete record:', error);
      message.error(t('health.messages.deleteFail'));
    }
  };

  const handleSubmit = async (values) => {
    try {
      const recordData = {
        systolic: values.systolic_pressure,
        diastolic: values.diastolic_pressure,
        heart_rate: values.heart_rate,
        timestamp: values.timestamp.toISOString(),
        tags: values.tags || [],
        note: values.notes,
      };

  if (selectedMemberId !== undefined && selectedMemberId !== null) {
        recordData.subject_member_id = selectedMemberId;
      }

      if (editingRecord) {
        await healthAPI.updateRecord(editingRecord.id, recordData);
        message.success(t('health.messages.updateSuccess'));
      } else {
        await healthAPI.createRecord(recordData);
        message.success(t('health.messages.addSuccess'));
      }

      setModalVisible(false);
      fetchRecords();
    } catch (error) {
      console.error('Failed to save record:', error);
      const errorMessage = error.response?.data?.message || t('health.messages.saveFail');
      message.error(errorMessage);
    }
  };

  const handleTableChange = (newPagination) => {
    setPagination(prev => ({
      ...prev,
      current: newPagination.current,
      pageSize: newPagination.pageSize,
    }));
  };

  // Generated by Zhuang: inline filter handlers
  const handleDateRangeChange = (range) => {
    setFilters(prev => ({ ...prev, dateRange: range }));
    setPagination(prev => ({ ...prev, current: 1 }));
  };

  const handleTagsChange = (tags) => {
    setFilters(prev => ({ ...prev, tags }));
    setPagination(prev => ({ ...prev, current: 1 }));
  };

  // Removed unused helper removeTagFilter - not used by current UI

  const columns = [
    {
      title: t('health.columns.time'),
      dataIndex: 'timestamp',
      key: 'timestamp',
      render: (timestamp) => dayjs(timestamp).format('YYYY-MM-DD HH:mm'),
      sorter: true,
    },
    {
      title: t('health.columns.bp'),
      key: 'blood_pressure',
      render: (_, record) => {
        // Backend fields are `systolic` and `diastolic`
        if (record.systolic && record.diastolic) {
          return `${record.systolic}/${record.diastolic} mmHg`;
        }
        return '-';
      },
    },
    {
      title: t('health.columns.hr'),
      dataIndex: 'heart_rate',
      key: 'heart_rate',
      render: (heartRate) => heartRate ? `${heartRate} bpm` : '-',
    },
    {
      title: t('health.columns.tags'),
      dataIndex: 'tags',
      key: 'tags',
      render: (tags) => (
        <Space wrap>
          {(tags || []).map(tag => (
            <Tag key={tag} color="blue">{tagValueToLabel(tag, t)}</Tag>
          ))}
        </Space>
      ),
    },
    {
      title: t('health.columns.note'),
  dataIndex: 'note',
  key: 'note',
  render: (note) => note || '-',
    },
    {
      title: t('health.columns.actions'),
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Button
            type="text"
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
          >
            {t('health.edit')}
          </Button>
          <Popconfirm
            title={t('health.messages.deleteConfirm')}
            onConfirm={() => handleDelete(record.id)}
            okText={t('health.form.save')}
            cancelText={t('health.form.cancel')}
          >
            <Button
              type="text"
              danger
              icon={<DeleteOutlined />}
            >
              {t('health.delete')}
            </Button>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  const handleExport = async () => {
    try {
      const params = {};
      if (filters.tags?.length) params.tags = filters.tags.join(',');
      if (filters.dateRange) {
        params.date_from = filters.dateRange[0].startOf('day').toDate().toISOString();
        params.date_to = filters.dateRange[1].endOf('day').toDate().toISOString();
      }
      if (selectedMemberId !== undefined && selectedMemberId !== null) {
        params.subject_member_id = selectedMemberId;
      }
      const resp = await healthAPI.exportCsv(params);
      const blob = new Blob([resp.data], { type: 'text/csv;charset=utf-8' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      // Generated by Zhuang: derive filename from Content-Disposition (supports RFC 5987 filename*)
      const cd = resp.headers && (resp.headers['content-disposition'] || resp.headers['Content-Disposition']);
      let filename = 'health_records.csv';
      if (cd) {
        // Try filename* first (RFC 5987)
  const fnStarMatch = /filename\*=UTF-8''([^;\n]+)/i.exec(cd);
        if (fnStarMatch && fnStarMatch[1]) {
          try {
            filename = decodeURIComponent(fnStarMatch[1]);
          } catch (_) { /* ignore decode error */ }
        } else {
          const fnMatch = /filename="?([^;\n"]+)"?/i.exec(cd);
          if (fnMatch && fnMatch[1]) {
            filename = fnMatch[1];
          }
        }
      }
      a.download = filename;
      a.click();
      window.URL.revokeObjectURL(url);
    } catch (e) {
      console.error('Export CSV failed', e);
  const msg = e.response?.data?.message || t('health.messages.exportFail');
      message.error(msg);
    }
  };

  return (
    <div>
      <div style={{ marginBottom: 8, display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 12 }}>
    <Title level={2}>{t('health.title')}</Title>
        <Space size={12} wrap>
          <Button
            icon={<DownloadOutlined />}
            onClick={handleExport}
          >
      {t('health.export')}
          </Button>
          <Button
            type="primary"
            icon={<PlusOutlined />}
            onClick={handleAdd}
          >
      {t('health.add')}
          </Button>
        </Space>
      </div>

      {/* Labeled inline filter bar - Generated by Zhuang */}
      <Card size="small" style={{ marginBottom: 8 }} bodyStyle={{ padding: 12 }}>
        <Form
          layout="inline"
          // Generated by Zhuang: keep filters strictly on one row
          style={{ display: 'flex', alignItems: 'center', gap: 12, flexWrap: 'nowrap' }}
          className="filter-bar"
        >
          <Form.Item label={t('health.filters.date')} style={{ marginBottom: 0, flex: '0 0 auto' }}>
            <DatePicker.RangePicker
              data-testid="filter-date-range"
              value={filters.dateRange}
              onChange={handleDateRangeChange}
              style={{ width: 320 }}
            />
          </Form.Item>

          <Form.Item
            label={t('health.filters.tags')}
            // Generated by Zhuang: allow TagSelector to grow but also shrink to stay in one line
            style={{ marginBottom: 0, flex: '1 1 420px', minWidth: 260, alignItems: 'center' }}
            className="filter-tags-item"
          >
            <TagSelector
              data-testid="filter-tags"
              value={filters.tags}
              onChange={handleTagsChange}
              placeholder={t('health.filters.tags')}
              // Generated by Zhuang: width fills container; allow shrink with smaller minWidth
              style={{ width: '100%', minWidth: 260 }}
              maxTagCount="responsive"
              dropdownMatchSelectWidth={false}
              listHeight={320}
              options={tagOptions}
            />
          </Form.Item>

          <Form.Item style={{ marginLeft: 'auto', marginBottom: 0 }}>
            <Button onClick={() => { setFilters({ tags: [], dateRange: null }); setPagination(prev => ({ ...prev, current: 1 })); }}>{t('health.filters.clear')}</Button>
          </Form.Item>
        </Form>
      </Card>

  {/* Removed extra date chip row to avoid duplication - Generated by Zhuang */}

      <Card>
        <Table
          columns={columns}
          dataSource={records}
          rowKey="id"
          loading={loading}
          pagination={{
            ...pagination,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) => t('health.table.total', { start: range[0], end: range[1], total }),
          }}
          onChange={handleTableChange}
          scroll={{ x: 'max-content' }}
        />
      </Card>

      {/* Add/Edit Modal */}
      <Modal
    title={editingRecord ? t('health.modal.editTitle') : t('health.modal.addTitle')}
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
        width={600}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
        >
          <Form.Item
            name="timestamp"
      label={t('health.form.timestamp')}
      rules={[{ required: true, message: t('health.form.timestamp') }]}
          >
            <DatePicker
              data-testid="timestamp"
              showTime
              style={{ width: '100%' }}
              format="YYYY-MM-DD HH:mm"
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="systolic_pressure"
                label={t('health.form.systolic')}
                rules={[
                  { required: true, message: t('health.form.systolic') },
                  { type: 'number', min: 50, max: 250, message: '50-250 mmHg' }
                ]}
              >
                <InputNumber
                  data-testid="systolic-pressure"
                  placeholder={t('health.form.systolic')}
                  style={{ width: '100%' }}
                  min={50}
                  max={250}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="diastolic_pressure"
                label={t('health.form.diastolic')}
                rules={[
                  { required: true, message: t('health.form.diastolic') },
                  { type: 'number', min: 50, max: 250, message: '50-250 mmHg' }
                ]}
              >
                <InputNumber
                  data-testid="diastolic-pressure"
                  placeholder={t('health.form.diastolic')}
                  style={{ width: '100%' }}
                  min={50}
                  max={250}
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="heart_rate"
            label={t('health.form.heartRate')}
            rules={[
              { type: 'number', min: 30, max: 200, message: '30-200 bpm' }
            ]}
          >
            <InputNumber
              data-testid="heart-rate"
              placeholder={t('health.form.heartRate')}
              style={{ width: '100%' }}
              min={30}
              max={200}
            />
          </Form.Item>

          <Form.Item
            name="tags"
            label={t('health.form.tags')}
          >
            <TagSelector />
          </Form.Item>

          <Form.Item
            name="notes"
            label={t('health.form.notes')}
          >
            <TextArea
              data-testid="notes"
              placeholder={t('health.form.notes')}
              rows={3}
            />
          </Form.Item>

          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit">
                {editingRecord ? t('health.form.update') : t('health.form.save')}
              </Button>
              <Button onClick={() => setModalVisible(false)}>
                {t('health.form.cancel')}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

  {/* Generated by Zhuang */}
    </div>
  );
};

export default HealthRecords;
