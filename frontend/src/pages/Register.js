/**
 * Register Page Component
 * Generated by Zhuang
 */
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Form, Input, Button, Card, Typography, message, Space, Select, InputNumber } from 'antd';
import { UserOutlined, LockOutlined, MailOutlined } from '@ant-design/icons';
import { authAPI } from '../services/api';
import { useTranslation } from 'react-i18next';

const { Title, Text } = Typography;
const { Option } = Select;

const Register = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const { t } = useTranslation();

  const onFinish = async (values) => {
    setLoading(true);
    try {
      await authAPI.register(values);
      message.success(t('messages.register.success'));
      navigate('/login');
    } catch (error) {
      console.error('Register error:', error);
      let errorMessage = t('messages.register.fail');
      
      if (error.response?.status === 409) {
        errorMessage = t('messages.register.emailExists');
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      }
      
      message.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      padding: '20px'
    }}>
      <Card className="register-form">
        <div style={{ textAlign: 'center', marginBottom: 32 }}>
          <Title level={2} style={{ color: '#1890ff', marginBottom: 8 }}>
            {t('register.title')}
          </Title>
          <Text type="secondary">{t('register.subtitle')}</Text>
        </div>

        <Form
          name="register"
          onFinish={onFinish}
          size="large"
          layout="vertical"
        >
          <Form.Item
            name="username"
            label={t('register.username')}
            rules={[
              { required: true, message: t('register.username') + '!' },
              { min: 2, message: t('register.username') + '!' }
            ]}
          >
            <Input
              prefix={<UserOutlined />}
              placeholder={t('register.username')}
            />
          </Form.Item>

          <Form.Item
            name="email"
            label={t('register.email')}
            rules={[
              { required: true, message: t('register.email') + '!' },
              { type: 'email', message: t('register.email') + '!' }
            ]}
          >
            <Input
              prefix={<MailOutlined />}
              placeholder={t('register.email')}
            />
          </Form.Item>

          <Form.Item
            name="password"
            label={t('register.password')}
            rules={[
              { required: true, message: t('register.password') + '!' },
              { min: 6, message: t('register.password') + '!' }
            ]}
          >
            <Input.Password
              prefix={<LockOutlined />}
              placeholder={t('register.password')}
            />
          </Form.Item>

          <Form.Item
            name="confirmPassword"
            label={t('register.confirmPassword')}
            dependencies={['password']}
            rules={[
              { required: true, message: t('register.confirmPassword') + '!' },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || getFieldValue('password') === value) {
                    return Promise.resolve();
                  }
                  return Promise.reject(new Error('Passwords do not match!'));
                },
              }),
            ]}
          >
            <Input.Password
              prefix={<LockOutlined />}
              placeholder={t('register.confirmPassword')}
            />
          </Form.Item>

          <Space style={{ width: '100%' }} size="large">
            <Form.Item
              name="age"
              label={t('register.age')}
              style={{ flex: 1 }}
            >
              <InputNumber
                placeholder={t('register.age')}
                min={1}
                max={120}
                style={{ width: '100%' }}
              />
            </Form.Item>

            <Form.Item
              name="gender"
              label={t('register.gender')}
              style={{ flex: 1 }}
            >
              <Select placeholder={t('register.gender')}>
                <Option value="M">{t('profile.gender.M')}</Option>
                <Option value="F">{t('profile.gender.F')}</Option>
                <Option value="O">{t('profile.gender.O')}</Option>
              </Select>
            </Form.Item>
          </Space>

          {/* Generated by Zhuang: Optional height for profile; will be synced to Self member height */}
          <Form.Item
            name="height"
            label={t('register.height')}
          >
            <InputNumber
              placeholder={t('register.height')}
              min={1}
              max={300}
              step={0.1}
              style={{ width: '100%' }}
            />
          </Form.Item>

          <Form.Item
            name="weight"
            label={t('register.weight')}
          >
            <InputNumber
              placeholder={t('register.weight')}
              min={1}
              max={500}
              step={0.1}
              style={{ width: '100%' }}
            />
          </Form.Item>

          <Form.Item>
            <Button
              type="primary"
              htmlType="submit"
              loading={loading}
              block
            >
              {t('register.submit')}
            </Button>
          </Form.Item>
        </Form>

        <div style={{ textAlign: 'center' }}>
          <Space>
            <Text type="secondary">{t('register.toLogin')}</Text>
            <Link to="/login">{t('register.loginNow')}</Link>
          </Space>
        </div>
      </Card>
    </div>
  );
};

export default Register;
