/**
 * Members Management Page (simplified family members).
 * Generated by Zhuang
 */
import React, { useEffect, useState } from 'react';
import {
  Card,
  Button,
  Table,
  Modal,
  Form,
  Input,
  InputNumber,
  Select,
  Space,
  Popconfirm,
  Typography,
  message,
} from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';
import { memberAPI } from '../services/api';
import { useTranslation } from 'react-i18next';

const { Title } = Typography;

const buildGenderOptions = (t) => ([
  { label: t('members.gender.male'), value: 'male' },
  { label: t('members.gender.female'), value: 'female' },
  { label: t('members.gender.other'), value: 'other' },
]);

const Members = () => {
  const { t } = useTranslation();
  const [loading, setLoading] = useState(false);
  const [members, setMembers] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);
  const [editing, setEditing] = useState(null);
  const [form] = Form.useForm();

  const load = async () => {
    try {
      setLoading(true);
      const resp = await memberAPI.list();
      setMembers(resp.data.members || []);
    } catch (e) {
      console.error('Failed to load members', e);
      message.error(t('members.messages.loadFail'));
    } finally {
      setLoading(false);
    }
  };

  // eslint-disable-next-line react-hooks/exhaustive-deps
  useEffect(() => { load(); }, []);

  const onAdd = () => {
    setEditing(null);
    form.resetFields();
    setModalVisible(true);
  };

  const onEdit = (record) => {
    setEditing(record);
    form.setFieldsValue({
      full_name: record.full_name,
      gender: record.gender,
      age: record.age,
      height: record.height,
      weight: record.weight,
    });
    setModalVisible(true);
  };

  const onDelete = async (record) => {
    try {
      await memberAPI.remove(record.id);
      message.success(t('members.messages.deleteSuccess'));
      load();
    } catch (e) {
      console.error('Delete member failed', e);
      message.error(t('members.messages.deleteFail'));
    }
  };

  const onSubmit = async (values) => {
    try {
      if (editing) {
        await memberAPI.update(editing.id, values);
        message.success(t('members.messages.updated'));
      } else {
        await memberAPI.create(values);
        message.success(t('members.messages.created'));
      }
      setModalVisible(false);
      load();
    } catch (e) {
      console.error('Save member failed', e);
      const msg = e.response?.data?.message || t('members.messages.saveFail');
      message.error(msg);
    }
  };

  const columns = [
    {
      title: t('members.columns.name'),
      dataIndex: 'full_name',
      key: 'full_name',
      render: (name) => {
        const isSelf = (name || '').toLowerCase() === 'self';
        const display = isSelf ? t('members.self.display') : (name || '');
        return (
          <span>
            {display}
            {isSelf && (
              <span style={{ marginLeft: 8, color: '#1890ff' }}>{t('members.self.hint')}</span>
            )}
          </span>
        );
      },
    },
    {
      title: t('members.columns.gender'),
      dataIndex: 'gender',
      key: 'gender',
      render: (v) => ({ male: t('members.gender.male'), female: t('members.gender.female') }[v] || t('members.gender.other')),
    },
    { title: t('members.columns.age'), dataIndex: 'age', key: 'age' },
    { title: t('members.columns.height'), dataIndex: 'height', key: 'height', render: (v) => (v ? `${v}` : '-') },
    { title: t('members.columns.weight'), dataIndex: 'weight', key: 'weight', render: (v) => (v ? `${v}` : '-') },
    {
      title: t('members.columns.status'),
      dataIndex: 'status',
      key: 'status',
      render: (v) => (v === 'active' ? t('members.status.active') : t('members.status.inactive')),
    },
    {
      title: t('members.columns.actions'),
      key: 'actions',
      render: (_, record) => {
        const isSelf = (record.full_name || '').toLowerCase() === 'self';
        return (
          <Space>
            {/* Generated by Zhuang: Disallow editing for 'Self' here; edit via Profile page */}
            <Button type="text" icon={<EditOutlined />} onClick={() => onEdit(record)} disabled={isSelf}>
              {t('health.edit')}
            </Button>
            <Popconfirm
              title={t('members.messages.deleteConfirm')}
              onConfirm={() => onDelete(record)}
              okText={t('health.form.save')}
              cancelText={t('health.form.cancel')}
              disabled={isSelf}
            >
              <Button type="text" danger icon={<DeleteOutlined />} disabled={isSelf}>
                {t('health.delete')}
              </Button>
            </Popconfirm>
          </Space>
        );
      },
    },
  ];

  return (
    <div>
      <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Title level={2}>{t('members.title')}</Title>
        <Button type="primary" icon={<PlusOutlined />} onClick={onAdd}>
          {t('members.add')}
        </Button>
      </div>

      <Card>
        <Table rowKey="id" columns={columns} dataSource={members} loading={loading} pagination={false} />
      </Card>

      <Modal title={editing ? t('members.edit') : t('members.create')} open={modalVisible} onCancel={() => setModalVisible(false)} footer={null}>
        <Form form={form} layout="vertical" onFinish={onSubmit}>
          <Form.Item name="full_name" label={t('members.form.name')} rules={[{ required: true, message: t('members.form.name') }]}>
            <Input placeholder={t('members.form.name')} disabled={(editing?.full_name || '').toLowerCase() === 'self'} />
          </Form.Item>
          <Form.Item name="gender" label={t('members.form.gender')}>
            <Select options={buildGenderOptions(t)} allowClear placeholder={t('members.form.gender')} disabled={(editing?.full_name || '').toLowerCase() === 'self'} />
          </Form.Item>
          <Form.Item name="age" label={t('members.form.age')}>
            <InputNumber min={0} max={120} style={{ width: '100%' }} placeholder={t('members.form.age')} disabled={(editing?.full_name || '').toLowerCase() === 'self'} />
          </Form.Item>
          <Form.Item name="height" label={t('members.form.height')}>
            <InputNumber min={0} max={300} style={{ width: '100%' }} placeholder={t('members.form.height')} disabled={(editing?.full_name || '').toLowerCase() === 'self'} />
          </Form.Item>
          <Form.Item name="weight" label={t('members.form.weight')}>
            <InputNumber min={0} max={500} style={{ width: '100%' }} placeholder={t('members.form.weight')} disabled={(editing?.full_name || '').toLowerCase() === 'self'} />
          </Form.Item>
          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit" disabled={(editing?.full_name || '').toLowerCase() === 'self'}>
                {t('members.form.save')}
              </Button>
              <Button onClick={() => setModalVisible(false)}>{t('members.form.cancel')}</Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default Members;
