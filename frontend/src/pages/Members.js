/**
 * Members Management Page (simplified family members).
 * Generated by Zhuang
 */
import React, { useEffect, useState } from 'react';
import {
  Card,
  Button,
  Table,
  Modal,
  Form,
  Input,
  InputNumber,
  Select,
  Space,
  Popconfirm,
  Typography,
  message,
} from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';
import { memberAPI } from '../services/api';

const { Title } = Typography;

const genderOptions = [
  { label: '男', value: 'male' },
  { label: '女', value: 'female' },
  { label: '其他', value: 'other' },
];

const Members = () => {
  const [loading, setLoading] = useState(false);
  const [members, setMembers] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);
  const [editing, setEditing] = useState(null);
  const [form] = Form.useForm();

  const load = async () => {
    try {
      setLoading(true);
      const resp = await memberAPI.list();
      setMembers(resp.data.members || []);
    } catch (e) {
      console.error('Failed to load members', e);
      message.error('加载成员失败');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { load(); }, []);

  const onAdd = () => {
    setEditing(null);
    form.resetFields();
    setModalVisible(true);
  };

  const onEdit = (record) => {
    setEditing(record);
    form.setFieldsValue({
      full_name: record.full_name,
      gender: record.gender,
      age: record.age,
      height: record.height,
      weight: record.weight,
    });
    setModalVisible(true);
  };

  const onDelete = async (record) => {
    try {
      await memberAPI.remove(record.id);
      message.success('成员已删除');
      load();
    } catch (e) {
      console.error('Delete member failed', e);
      message.error('删除失败');
    }
  };

  const onSubmit = async (values) => {
    try {
      if (editing) {
        await memberAPI.update(editing.id, values);
        message.success('已更新');
      } else {
        await memberAPI.create(values);
        message.success('已创建');
      }
      setModalVisible(false);
      load();
    } catch (e) {
      console.error('Save member failed', e);
      const msg = e.response?.data?.message || '保存失败';
      message.error(msg);
    }
  };

  const columns = [
    { title: '姓名', dataIndex: 'full_name', key: 'full_name', render: (name) => {
      const isSelf = (name || '').toLowerCase() === 'self';
      const display = isSelf ? '自己' : (name || '');
      return (
        <span>
          {display}
          {isSelf && <span style={{ marginLeft: 8, color: '#1890ff' }}>（默认/不可删除，信息请到“个人信息”修改）</span>}
        </span>
      );
    } },
    { title: '性别', dataIndex: 'gender', key: 'gender', render: (v) => ({ male: '男', female: '女' }[v] || '其他') },
    { title: '年龄', dataIndex: 'age', key: 'age' },
    { title: '身高(cm)', dataIndex: 'height', key: 'height', render: (v) => (v ? `${v}` : '-') },
    { title: '体重(kg)', dataIndex: 'weight', key: 'weight', render: (v) => (v ? `${v}` : '-') },
    { title: '状态', dataIndex: 'status', key: 'status', render: (v) => (v === 'active' ? '启用' : '停用') },
    {
      title: '操作',
      key: 'actions',
      render: (_, record) => {
    const isSelf = (record.full_name || '').toLowerCase() === 'self';
        return (
          <Space>
      {/* Generated by Zhuang: Disallow editing for '自己' here; edit via Profile page */}
      <Button type="text" icon={<EditOutlined />} onClick={() => onEdit(record)} disabled={isSelf}>编辑</Button>
            <Popconfirm
              title="确定删除该成员？"
              onConfirm={() => onDelete(record)}
              okText="确定"
              cancelText="取消"
              disabled={isSelf}
            >
              <Button type="text" danger icon={<DeleteOutlined />} disabled={isSelf}>删除</Button>
            </Popconfirm>
          </Space>
        );
      },
    },
  ];

  return (
    <div>
      <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Title level={2}>成员管理</Title>
        <Button type="primary" icon={<PlusOutlined />} onClick={onAdd}>新增成员</Button>
      </div>

      <Card>
        <Table rowKey="id" columns={columns} dataSource={members} loading={loading} pagination={false} />
      </Card>

      <Modal title={editing ? '编辑成员' : '新增成员'} open={modalVisible} onCancel={() => setModalVisible(false)} footer={null}>
        <Form form={form} layout="vertical" onFinish={onSubmit}>
          <Form.Item name="full_name" label="姓名" rules={[{ required: true, message: '请输入姓名' }]}>
            <Input placeholder="姓名" disabled={(editing?.full_name || '').toLowerCase() === 'self'} />
          </Form.Item>
          <Form.Item name="gender" label="性别">
            <Select options={genderOptions} allowClear placeholder="选择性别" disabled={(editing?.full_name || '').toLowerCase() === 'self'} />
          </Form.Item>
          <Form.Item name="age" label="年龄">
            <InputNumber min={0} max={120} style={{ width: '100%' }} placeholder="年龄" disabled={(editing?.full_name || '').toLowerCase() === 'self'} />
          </Form.Item>
          <Form.Item name="height" label="身高(cm)">
            <InputNumber min={0} max={300} style={{ width: '100%' }} placeholder="身高(cm)" disabled={(editing?.full_name || '').toLowerCase() === 'self'} />
          </Form.Item>
          <Form.Item name="weight" label="体重(kg)">
            <InputNumber min={0} max={500} style={{ width: '100%' }} placeholder="体重(kg)" disabled={(editing?.full_name || '').toLowerCase() === 'self'} />
          </Form.Item>
          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit" disabled={(editing?.full_name || '').toLowerCase() === 'self'}>保存</Button>
              <Button onClick={() => setModalVisible(false)}>取消</Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default Members;
