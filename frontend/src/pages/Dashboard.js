/**
 * Dashboard Page Component
 * Generated by Zhuang
 */
import React, { useState, useEffect, useCallback } from 'react';
import { Card, Row, Col, Statistic, Typography, message, Spin } from 'antd';
import { HeartOutlined, FileTextOutlined, CalendarOutlined } from '@ant-design/icons';
import { healthAPI } from '../services/api';
import HealthChart from '../components/HealthChart';
import { useMember } from '../context/MemberContext';
import { useTranslation } from 'react-i18next';

const { Title } = Typography;

const Dashboard = () => {
  const { t } = useTranslation();
  const [loading, setLoading] = useState(true);
  const [statistics, setStatistics] = useState({
    totalRecords: 0,
    thisWeekRecords: 0,
    avgSystolic: 0,
    avgDiastolic: 0,
    avgHeartRate: 0,
  });
  const [recentRecords, setRecentRecords] = useState([]);
  const { selectedMemberId } = useMember();

  const fetchDashboardData = useCallback(async () => {
    try {
      setLoading(true);
      
      // Fetch recent records for statistics
  const params = { page: 1, size: 50 }; // Generated by Zhuang: backend expects 'size'
  if (selectedMemberId !== undefined && selectedMemberId !== null) {
        params.subject_member_id = selectedMemberId;
      }
      const response = await healthAPI.getRecords(params);
      
      const records = response.data.records || [];
      setRecentRecords(records.slice(0, 10)); // Keep only recent 10 for display
      
      // Calculate statistics
      const stats = calculateStatistics(records);
      setStatistics(stats);
      
    } catch (error) {
      console.error('Failed to fetch dashboard data:', error);
  message.error(t('health.messages.loadFail'));
    } finally {
      setLoading(false);
    }
  }, [selectedMemberId, t]);

  useEffect(() => {
    fetchDashboardData();
  }, [fetchDashboardData]);

  const calculateStatistics = (records) => {
    if (!records.length) {
      return {
        totalRecords: 0,
        thisWeekRecords: 0,
        avgSystolic: 0,
        avgDiastolic: 0,
        avgHeartRate: 0,
      };
    }

    // Get current week's records
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    
    const thisWeekRecords = records.filter(record => 
      new Date(record.timestamp) >= oneWeekAgo
    );

    // Calculate averages (coerce values to numbers and validate)
    const getNum = (v) => {
      const n = Number(v);
      return Number.isFinite(n) ? n : 0;
    };

    const validRecords = records.filter(r => getNum(r.systolic) > 0 && getNum(r.diastolic) > 0);
    const validHeartRateRecords = records.filter(r => getNum(r.heart_rate) > 0);

    const totalSystolic = validRecords.reduce((sum, r) => sum + getNum(r.systolic), 0);
    const totalDiastolic = validRecords.reduce((sum, r) => sum + getNum(r.diastolic), 0);
    const totalHeartRate = validHeartRateRecords.reduce((sum, r) => sum + getNum(r.heart_rate), 0);

    return {
      totalRecords: records.length,
      thisWeekRecords: thisWeekRecords.length,
  avgSystolic: validRecords.length ? Math.round(totalSystolic / validRecords.length) : 0,
  avgDiastolic: validRecords.length ? Math.round(totalDiastolic / validRecords.length) : 0,
  avgHeartRate: validHeartRateRecords.length ? Math.round(totalHeartRate / validHeartRateRecords.length) : 0,
    };
  };

  if (loading) {
    return (
      <div style={{ textAlign: 'center', padding: '50px' }}>
        <Spin size="large" />
      </div>
    );
  }

  return (
    <div>
      <div className="page-header">
  <Title level={2}>{t('dashboard.title')}</Title>
      </div>

      {/* Statistics Cards */}
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col xs={24} sm={12} md={8} lg={6}>
          <Card>
            <Statistic
              title={t('dashboard.totalRecords')}
              value={statistics.totalRecords}
              prefix={<FileTextOutlined />}
              valueStyle={{ color: '#3f8600' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} md={8} lg={6}>
          <Card>
            <Statistic
              title={t('dashboard.thisWeek')}
              value={statistics.thisWeekRecords}
              prefix={<CalendarOutlined />}
              valueStyle={{ color: '#1890ff' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} md={8} lg={6}>
          <Card>
            <Statistic
              title={t('dashboard.avgSystolic')}
              value={statistics.avgSystolic}
              suffix="mmHg"
              prefix={<HeartOutlined />}
              valueStyle={{ color: '#cf1322' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} md={8} lg={6}>
          <Card>
            <Statistic
              title={t('dashboard.avgDiastolic')}
              value={statistics.avgDiastolic}
              suffix="mmHg"
              prefix={<HeartOutlined />}
              valueStyle={{ color: '#cf1322' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} md={8} lg={6}>
          <Card>
            <Statistic
              title={t('dashboard.avgHeartRate')}
              value={statistics.avgHeartRate}
              suffix="bpm"
              prefix={<HeartOutlined />}
              valueStyle={{ color: '#722ed1' }}
            />
          </Card>
        </Col>
      </Row>

      {/* Health Chart */}
  <Card title={t('dashboard.chartTitle')} className="chart-container">
        <HealthChart records={recentRecords} />
      </Card>
    </div>
  );
};

export default Dashboard;
