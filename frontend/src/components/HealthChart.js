/**
 * Health Chart Component using ECharts
 * Generated by Zhuang
 */
import React, { useEffect, useState, useCallback } from 'react';
import ReactEChartsCore from 'echarts-for-react/lib/core';
import * as echarts from 'echarts/core';
import { LineChart } from 'echarts/charts';
import {
  GridComponent,
  TooltipComponent,
  LegendComponent,
  DataZoomComponent,
} from 'echarts/components';
import { CanvasRenderer } from 'echarts/renderers';
import { Empty, Select, Space, Button } from 'antd';
import { DownloadOutlined } from '@ant-design/icons';
import dayjs from 'dayjs';
import { useTranslation } from 'react-i18next';

const { Option } = Select;

// Register ECharts components
echarts.use([
  LineChart,
  GridComponent,
  TooltipComponent,
  LegendComponent,
  DataZoomComponent,
  CanvasRenderer,
]);

const HealthChart = ({ records = [] }) => {
  const { t } = useTranslation();
  const [timeRange, setTimeRange] = useState('week'); // week, month, all
  const [filteredRecords, setFilteredRecords] = useState([]);

  const filterRecordsByTimeRange = useCallback(() => {
    if (!records.length) {
      setFilteredRecords([]);
      return;
    }

    let filtered = [...records];
    const now = dayjs();

    switch (timeRange) {
      case 'week':
        filtered = records.filter(record => 
          dayjs(record.timestamp).isAfter(now.subtract(7, 'day'))
        );
        break;
      case 'month':
        filtered = records.filter(record => 
          dayjs(record.timestamp).isAfter(now.subtract(30, 'day'))
        );
        break;
      default:
        // 'all' - use all records
        break;
    }

    // Sort by timestamp
    filtered.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
    setFilteredRecords(filtered);
  }, [records, timeRange]);

  useEffect(() => {
    filterRecordsByTimeRange();
  }, [filterRecordsByTimeRange]);

  const downloadChart = () => {
    const chartInstance = document.querySelector('.health-chart canvas');
    if (chartInstance) {
      const link = document.createElement('a');
      link.download = `health-chart-${timeRange}-${dayjs().format('YYYY-MM-DD')}.png`;
      link.href = chartInstance.toDataURL();
      link.click();
    }
  };

  if (!filteredRecords.length) {
    return (
      <div>
        <Space style={{ marginBottom: 16 }}>
          <Select value={timeRange} onChange={setTimeRange} style={{ width: 120 }}>
      <Option value="week">{t('chart.range.week')}</Option>
      <Option value="month">{t('chart.range.month')}</Option>
      <Option value="all">{t('chart.range.all')}</Option>
          </Select>
        </Space>
    <Empty description={t('chart.noData')} />
      </div>
    );
  }

  // Prepare data for ECharts
  const timeAxis = filteredRecords.map(record => 
    dayjs(record.timestamp).format('MM-DD HH:mm')
  );
  
  // Backend fields are `systolic` and `diastolic`; coerce to numbers, use nulls for missing values
  const toNumOrNull = (v) => {
    const n = Number(v);
    return Number.isFinite(n) ? n : null;
  };
  const systolicData = filteredRecords.map(record => toNumOrNull(record.systolic));
  const diastolicData = filteredRecords.map(record => toNumOrNull(record.diastolic));
  const heartRateData = filteredRecords.map(record => toNumOrNull(record.heart_rate));

  const option = {
    title: {
  text: t('dashboard.chartTitle'),
      left: 'center',
    },
  tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'cross',
      },
      formatter: function (params) {
        let result = `${params[0].axisValue}<br/>`;
        params.forEach(param => {
          if (param.value !== null) {
      const unit = param.seriesName === t('chart.series.hr') ? ' bpm' : ' mmHg';
      result += `${param.seriesName}: ${param.value}${unit}<br/>`;
          }
        });
        return result;
      },
    },
    legend: {
      data: [t('chart.series.systolic'), t('chart.series.diastolic'), t('chart.series.hr')],
      top: 30,
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '10%',
      top: '15%',
      containLabel: true,
    },
    xAxis: {
      type: 'category',
      boundaryGap: false,
      data: timeAxis,
      axisLabel: {
        rotate: 45,
      },
    },
    yAxis: [
      {
        type: 'value',
  name: t('chart.yaxis.bp'),
        position: 'left',
        axisLabel: {
          formatter: '{value} mmHg',
        },
        min: 50,
        max: 200,
      },
      {
        type: 'value',
  name: t('chart.yaxis.hr'),
        position: 'right',
        axisLabel: {
          formatter: '{value} bpm',
        },
        min: 50,
        max: 150,
      },
    ],
    series: [
      {
  name: t('chart.series.systolic'),
        type: 'line',
        yAxisIndex: 0,
        data: systolicData,
        itemStyle: {
          color: '#ff4d4f',
        },
        lineStyle: {
          color: '#ff4d4f',
        },
        connectNulls: false,
        symbol: 'circle',
        symbolSize: 6,
        emphasis: {
          itemStyle: {
            borderColor: '#ff4d4f',
            borderWidth: 2,
          },
        },
      },
      {
  name: t('chart.series.diastolic'),
        type: 'line',
        yAxisIndex: 0,
        data: diastolicData,
        itemStyle: {
          color: '#52c41a',
        },
        lineStyle: {
          color: '#52c41a',
        },
        connectNulls: false,
        symbol: 'circle',
        symbolSize: 6,
        emphasis: {
          itemStyle: {
            borderColor: '#52c41a',
            borderWidth: 2,
          },
        },
      },
      {
  name: t('chart.series.hr'),
        type: 'line',
        yAxisIndex: 1,
        data: heartRateData,
        itemStyle: {
          color: '#1890ff',
        },
        lineStyle: {
          color: '#1890ff',
        },
        connectNulls: false,
        symbol: 'triangle',
        symbolSize: 6,
        emphasis: {
          itemStyle: {
            borderColor: '#1890ff',
            borderWidth: 2,
          },
        },
      },
    ],
    dataZoom: [
      {
        type: 'inside',
        start: 0,
        end: 100,
      },
      {
        start: 0,
        end: 100,
      },
    ],
  };

  return (
    <div>
      <Space style={{ marginBottom: 16, justifyContent: 'space-between', width: '100%' }}>
        <Select value={timeRange} onChange={setTimeRange} style={{ width: 120 }}>
          <Option value="week">{t('chart.range.week')}</Option>
          <Option value="month">{t('chart.range.month')}</Option>
          <Option value="all">{t('chart.range.all')}</Option>
        </Select>
        <Button 
          icon={<DownloadOutlined />} 
          onClick={downloadChart}
          type="default"
        >
          {t('chart.download')}
        </Button>
      </Space>
      
      <ReactEChartsCore
        echarts={echarts}
        option={option}
        style={{ height: '400px', width: '100%' }}
        className="health-chart"
      />
    </div>
  );
};

export default HealthChart;
