/**
 * Main App Component
 * Generated by Zhuang
 */
import React, { useMemo, useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { ConfigProvider } from 'antd';
import zhCN from 'antd/locale/zh_CN';
import enUS from 'antd/locale/en_US';
import 'antd/dist/reset.css';
import './App.css';
import './i18n'; // Generated by Zhuang: initialize i18n
import { useTranslation } from 'react-i18next';
import dayjs from 'dayjs';
import 'dayjs/locale/zh-cn';
import 'dayjs/locale/en';

import Layout from './components/Layout';
import Login from './pages/Login';
import Register from './pages/Register';
import Dashboard from './pages/Dashboard';
import HealthRecords from './pages/HealthRecords';
import Profile from './pages/Profile';
import Members from './pages/Members';
import Settings from './pages/Settings';
import { MemberProvider } from './context/MemberContext';
import { isAuthenticated } from './utils/auth';

// Protected Route Component
const ProtectedRoute = ({ children }) => {
  return isAuthenticated() ? children : <Navigate to="/login" />;
};

// Public Route Component (redirect to dashboard if authenticated)
const PublicRoute = ({ children }) => {
  return !isAuthenticated() ? children : <Navigate to="/dashboard" />;
};

function App() {
  // Generated by Zhuang: react-i18next hook
  const { i18n } = useTranslation();
  const [lang, setLang] = useState(i18n.language || 'zh');

  // Sync from i18n on start and when language changes elsewhere
  useEffect(() => {
    const applyLocale = (lng) => {
      setLang(lng);
      dayjs.locale(lng && lng.startsWith('en') ? 'en' : 'zh-cn');
    };
    // initialize once
    applyLocale(i18n.language || 'zh');
    // subscribe and cleanup correctly
    const onChange = (lng) => applyLocale(lng);
    i18n.on('languageChanged', onChange);
    return () => {
      i18n.off('languageChanged', onChange);
    };
  }, [i18n]);

  // Map app language to AntD locale
  const antdLocale = useMemo(() => (lang === 'en' ? enUS : zhCN), [lang]);

  return (
    <ConfigProvider locale={antdLocale}>
      <Router>
        <MemberProvider>
        <div className="App">
          <Routes>
            {/* Public Routes */}
            <Route path="/login" element={
              <PublicRoute>
                <Login />
              </PublicRoute>
            } />
            <Route path="/register" element={
              <PublicRoute>
                <Register />
              </PublicRoute>
            } />
            
            {/* Protected Routes */}
            <Route path="/" element={
              <ProtectedRoute>
                <Layout />
              </ProtectedRoute>
            }>
              <Route index element={<Navigate to="/dashboard" />} />
              <Route path="dashboard" element={<Dashboard />} />
              <Route path="health-records" element={<HealthRecords />} />
              <Route path="members" element={<Members />} />
              <Route path="profile" element={<Profile />} />
              <Route path="settings" element={<Settings />} />
            </Route>
            
            {/* Fallback */}
            <Route path="*" element={<Navigate to="/" />} />
          </Routes>
        </div>
        </MemberProvider>
      </Router>
    </ConfigProvider>
  );
}

export default App;
