"""
Member manager layer for simplified family management. Generated by Zhuang
"""
from typing import List, Optional, Tuple
from sqlalchemy import and_
from ..extensions import db
from ..models import Household, Member
from ..resilience.policy import db_breaker, with_retry


class MemberManager:
    @db_breaker
    @with_retry()
    def ensure_default_household(self, owner_user_id: int) -> Household:
        hh = Household.query.filter_by(owner_user_id=owner_user_id).first()
        if hh:
            return hh
        hh = Household()
        hh.owner_user_id = owner_user_id
        hh.name = "My Household"
        db.session.add(hh)
        db.session.commit()
        # Also ensure a default "self" member exists
        m = Member()
        m.household_id = hh.id
        m.full_name = "Self"
        m.status = "active"
        db.session.add(m)
        db.session.commit()
        return hh

    @db_breaker
    def get_household(self, owner_user_id: int) -> Optional[Household]:
        return Household.query.filter_by(owner_user_id=owner_user_id).first()

    @db_breaker
    def list_members(self, owner_user_id: int) -> List[Member]:
        hh = self.ensure_default_household(owner_user_id)
        return Member.query.filter_by(household_id=hh.id, status="active").order_by(Member.id.asc()).all()

    @db_breaker
    def get_member(self, owner_user_id: int, member_id: int) -> Optional[Member]:
        hh = self.ensure_default_household(owner_user_id)
        return Member.query.filter_by(id=member_id, household_id=hh.id).first()

    @db_breaker
    @with_retry()
    def create_member(self, owner_user_id: int, full_name: str, gender: Optional[str], age: Optional[int],
                      height: Optional[float], weight: Optional[float]) -> Member:
        hh = self.ensure_default_household(owner_user_id)
        m = Member()
        m.household_id = hh.id
        m.full_name = full_name
        m.gender = gender
        m.age = age
        m.height = height
        m.weight = weight
        m.status = "active"
        db.session.add(m)
        db.session.commit()
        return m

    @db_breaker
    @with_retry()
    def update_member(self, member: Member, **fields) -> Member:
        for k, v in fields.items():
            if hasattr(member, k):
                setattr(member, k, v)
        db.session.commit()
        return member

    @db_breaker
    @with_retry()
    def soft_delete_member(self, member: Member):
        member.status = "inactive"
        db.session.commit()

    @db_breaker
    def get_or_create_self_member(self, owner_user_id: int) -> Member:
        hh = self.ensure_default_household(owner_user_id)
        m = Member.query.filter_by(household_id=hh.id, full_name="Self").first()
        if m:
            return m
        m = Member()
        m.household_id = hh.id
        m.full_name = "Self"
        m.status = "active"
        db.session.add(m)
        db.session.commit()
        return m
