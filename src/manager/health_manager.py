"""
Health manager layer. Generated by Zhuang
"""
import json
from datetime import datetime
from typing import List, Optional, Tuple
from sqlalchemy import and_
from ..extensions import db
from ..models import HealthRecord, FamilyMember
from ..resilience.policy import db_breaker, with_retry


class HealthManager:
    @db_breaker
    @with_retry()
    def create(self, user_id: int, family_member_id: int, systolic: int, diastolic: int, heart_rate: Optional[int],
               timestamp: datetime, tags: List[str], note: Optional[str]) -> HealthRecord:
        rec = HealthRecord()
        rec.user_id = user_id
        rec.family_member_id = family_member_id
        rec.systolic = systolic
        rec.diastolic = diastolic
        rec.heart_rate = heart_rate
        rec.timestamp = timestamp
        rec.tags = json.dumps(tags)
        rec.note = note
        db.session.add(rec)
        db.session.commit()
        return rec

    def _base_query(self, user_id: int):
        return HealthRecord.query.filter_by(user_id=user_id)

    @db_breaker
    def get(self, user_id: int, rec_id: int) -> Optional[HealthRecord]:
        return HealthRecord.query.filter_by(id=rec_id, user_id=user_id).first()

    @db_breaker
    def count(self, user_id: int, q):
        return q.count()

    @db_breaker
    def list(self, user_id: int, page: int, size: int, tags: Optional[List[str]],
             date_from: Optional[datetime], date_to: Optional[datetime], 
             family_member_id: Optional[int] = None) -> Tuple[int, List[HealthRecord]]:
        q = self._base_query(user_id)
        
        # Filter by family member if specified
        if family_member_id:
            q = q.filter(HealthRecord.family_member_id == family_member_id)
        
        if tags:
            for t in tags:
                q = q.filter(HealthRecord.tags.contains(t))
        if date_from:
            q = q.filter(HealthRecord.timestamp >= date_from)
        if date_to:
            q = q.filter(HealthRecord.timestamp <= date_to)
        total = q.count()
        items = q.order_by(HealthRecord.timestamp.desc()).offset((page - 1) * size).limit(size).all()
        return total, items

    @db_breaker
    @with_retry()
    def update(self, rec: HealthRecord, **fields) -> HealthRecord:
        for k, v in fields.items():
            if hasattr(rec, k):
                setattr(rec, k, v)
        db.session.commit()
        return rec

    @db_breaker
    @with_retry()
    def delete(self, rec: HealthRecord):
        db.session.delete(rec)
        db.session.commit()

    @db_breaker
    @with_retry()
    def migrate_records_to_self_member(self, user_id: int, self_member_id: int):
        """Migrate existing health records to associate with the Self family member"""
        orphaned_records = HealthRecord.query.filter_by(user_id=user_id, family_member_id=None).all()
        for record in orphaned_records:
            record.family_member_id = self_member_id
        db.session.commit()
        return len(orphaned_records)
