"""
Family member manager layer. Generated by Zhuang
"""
from typing import List, Optional
from sqlalchemy import and_
from ..extensions import db
from ..models import FamilyMember, HealthRecord
from ..resilience.policy import db_breaker, with_retry


class FamilyMemberManager:
    @db_breaker
    @with_retry()
    def create(self, user_id: int, name: str, gender: Optional[str] = None, 
               age: Optional[int] = None, height: Optional[float] = None, 
               weight: Optional[float] = None, is_self: bool = False) -> FamilyMember:
        member = FamilyMember()
        member.user_id = user_id
        member.name = name
        member.gender = gender
        member.age = age
        member.height = height
        member.weight = weight
        member.is_self = is_self
        db.session.add(member)
        db.session.commit()
        return member

    def _base_query(self, user_id: int):
        return FamilyMember.query.filter_by(user_id=user_id, is_deleted=False)

    @db_breaker
    def get(self, user_id: int, member_id: int) -> Optional[FamilyMember]:
        return self._base_query(user_id).filter_by(id=member_id).first()

    @db_breaker
    def get_self_member(self, user_id: int) -> Optional[FamilyMember]:
        return self._base_query(user_id).filter_by(is_self=True).first()

    @db_breaker
    def list(self, user_id: int) -> List[FamilyMember]:
        return self._base_query(user_id).order_by(FamilyMember.is_self.desc(), FamilyMember.name).all()

    @db_breaker
    @with_retry()
    def update(self, member: FamilyMember, **fields) -> FamilyMember:
        for k, v in fields.items():
            if hasattr(member, k) and k not in ['id', 'user_id', 'created_at']:
                setattr(member, k, v)
        db.session.commit()
        return member

    @db_breaker
    @with_retry() 
    def soft_delete(self, member: FamilyMember):
        # Check if member has health records
        has_records = HealthRecord.query.filter_by(family_member_id=member.id).first() is not None
        if has_records:
            # Soft delete to preserve history
            member.is_deleted = True
            db.session.commit()
        else:
            # Hard delete if no records
            db.session.delete(member)
            db.session.commit()

    @db_breaker
    @with_retry()
    def ensure_self_member(self, user_id: int) -> FamilyMember:
        """Ensure user has a default 'Self' member, create if not exists"""
        self_member = self.get_self_member(user_id)
        if not self_member:
            # Import User here to avoid circular import
            from ..models import User
            user = db.session.get(User, user_id)
            if user:
                self_member = self.create(
                    user_id=user_id,
                    name="本人 (Self)",
                    gender=user.gender,
                    age=user.age,
                    weight=user.weight,
                    is_self=True
                )
        return self_member