"""
Member service endpoints for simplified family members. Generated by Zhuang
"""
from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from ..manager.member_manager import MemberManager
from ..utils import error
from ..manager.user_manager import UserManager


member_bp = Blueprint("members", __name__)
manager = MemberManager()


@member_bp.route("", methods=["GET"])
@jwt_required()
def list_members():
    user_id = get_jwt_identity()
    items = manager.list_members(user_id)
    # Generated by Zhuang: For the default 'Self' member, pull fields from user profile (个人信息)
    user_mgr = UserManager()
    user = user_mgr.get_user(user_id)

    def _merge_self(member):
        # Treat both 'Self' and '自己' as the default self member
        name = (member.full_name or '').strip()
        is_self = name.lower() == 'self' or name == '自己'
        if not is_self or not user:
            return member.gender, member.age, member.height, member.weight
        # Map user.gender from either M/F/O or male/female/other into member's male/female/other
        val = (user.gender or '').strip()
        letter_map = {'M': 'male', 'F': 'female', 'O': 'other'}
        word_map = {'male': 'male', 'female': 'female', 'other': 'other', '男': 'male', '女': 'female'}
        g = None
        if val:
            g = letter_map.get(val.upper()) or word_map.get(val.lower()) or member.gender
        else:
            g = member.gender
        age = user.age if user.age is not None else member.age
        # Height lives on member; sync from Profile update path writes to Self member already
        height = member.height
        weight = user.weight if user.weight is not None else member.weight
        return g, age, height, weight

    data = []
    for m in items:
        g, a, h, w = _merge_self(m)
        data.append({
            "id": m.id,
            "full_name": m.full_name,
            "gender": g,
            "age": a,
            "height": h,
            "weight": w,
            "status": m.status,
        })
    return jsonify({"members": data}), 200


@member_bp.route("", methods=["POST"])
@jwt_required()
def create_member():
    user_id = get_jwt_identity()
    data = request.get_json(force=True) or {}
    full_name = (data.get("full_name") or "").strip()
    if not full_name:
        return jsonify(error("400", "full_name is required")), 400
    gender = data.get("gender")
    age = data.get("age")
    height = data.get("height")
    weight = data.get("weight")
    m = manager.create_member(user_id, full_name, gender, age, height, weight)
    return jsonify({
        "id": m.id,
        "full_name": m.full_name,
        "gender": m.gender,
        "age": m.age,
        "height": m.height,
        "weight": m.weight,
        "status": m.status,
    }), 201


@member_bp.route("/<int:member_id>", methods=["PUT"])
@jwt_required()
def update_member(member_id: int):
    user_id = get_jwt_identity()
    m = manager.get_member(user_id, member_id)
    if not m:
        return jsonify(error("404", "Member not found")), 404
    # Generated by Zhuang: Disallow updating the default Self member here; edit via user profile instead
    if (m.full_name or '').lower() == 'self' or (m.full_name or '').strip() == '自己':
        return jsonify(error("400", "Cannot edit the default 'Self' member here; please update via user profile.")), 400
    data = request.get_json(force=True) or {}
    allowed = {"full_name", "gender", "age", "height", "weight", "status"}
    updates = {k: v for k, v in data.items() if k in allowed}
    m = manager.update_member(m, **updates)
    return jsonify({
        "id": m.id,
        "full_name": m.full_name,
        "gender": m.gender,
        "age": m.age,
        "height": m.height,
        "weight": m.weight,
        "status": m.status,
    }), 200


@member_bp.route("/<int:member_id>", methods=["DELETE"])
@jwt_required()
def delete_member(member_id: int):
    user_id = get_jwt_identity()
    m = manager.get_member(user_id, member_id)
    if not m:
        return jsonify(error("404", "Member not found")), 404
    # Generated by Zhuang: Disallow deleting the default Self member
    if (m.full_name or '').lower() == 'self' or (m.full_name or '').strip() == '自己':
        return jsonify(error("400", "Cannot delete the default 'Self' member")), 400
    # For Phase A: disallow hard delete if has records – handled at UI; here we soft delete.
    manager.soft_delete_member(m)
    return jsonify({"message": "Member deleted (soft)."}), 200
