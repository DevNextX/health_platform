"""
Health service endpoints. Generated by Zhuang
"""
import json
from datetime import datetime, UTC
from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from sqlalchemy import and_
from ..manager.health_manager import HealthManager
from ..utils import get_pagination_params, make_pagination, error

health_bp = Blueprint("health", __name__)
manager = HealthManager()


@health_bp.route("", methods=["POST"])
@jwt_required()
def create_record():
    user_id = get_jwt_identity()
    data = request.get_json(force=True) or {}
    try:
        systolic = int(data.get("systolic"))
        diastolic = int(data.get("diastolic"))
    except (TypeError, ValueError):
        return jsonify(error("400", "Invalid blood pressure")), 400
    if not (50 <= systolic <= 250) or not (50 <= diastolic <= 250):
        return jsonify(error("422", "Blood pressure out of range (50-250)")), 422
    heart_rate = data.get("heart_rate")
    if heart_rate is not None:
        try:
            heart_rate = int(heart_rate)
        except (TypeError, ValueError):
            return jsonify(error("400", "Invalid heart_rate")), 400
    ts_raw = data.get("timestamp")
    # Use timezone-aware UTC datetime to avoid deprecation warnings
    ts = datetime.now(UTC) if not ts_raw else datetime.fromisoformat(ts_raw.replace("Z", "+00:00"))
    tags = data.get("tags") or []
    if not isinstance(tags, list):
        return jsonify(error("400", "tags must be a list")), 400
    note = data.get("note")

    rec = manager.create(user_id=user_id, systolic=systolic, diastolic=diastolic, heart_rate=heart_rate,
                         timestamp=ts, tags=tags, note=note)
    return jsonify({
        "id": rec.id,
        "systolic": rec.systolic,
        "diastolic": rec.diastolic,
        "heart_rate": rec.heart_rate,
    # Normalize UTC offset to trailing 'Z' for clients
    "timestamp": rec.timestamp.isoformat().replace("+00:00", "Z"),
        "tags": tags,
        "note": rec.note,
    "created_at": rec.created_at.isoformat().replace("+00:00", "Z"),
    }), 201


@health_bp.route("", methods=["GET"])
@jwt_required()
def list_records():
    user_id = get_jwt_identity()
    page, size = get_pagination_params()
    # Build filters
    tags_q = request.args.get("tags")
    tag_list = None
    if tags_q:
        tag_list = [x.strip() for x in tags_q.split(",") if x.strip()]

    date_from = request.args.get("date_from")
    date_to = request.args.get("date_to")
    df = None
    dt = None
    if date_from:
        try:
            df = datetime.fromisoformat(date_from.replace("Z", "+00:00"))
        except ValueError:
            return jsonify(error("400", "Invalid date_from")), 400
    if date_to:
        try:
            dt = datetime.fromisoformat(date_to.replace("Z", "+00:00"))
        except ValueError:
            return jsonify(error("400", "Invalid date_to")), 400

    total, items = manager.list(user_id=user_id, page=page, size=size, tags=tag_list, date_from=df, date_to=dt)
    data = [{
        "id": r.id,
        "systolic": r.systolic,
        "diastolic": r.diastolic,
        "heart_rate": r.heart_rate,
    "timestamp": r.timestamp.isoformat().replace("+00:00", "Z"),
        "tags": json.loads(r.tags) if r.tags else [],
        "note": r.note,
    } for r in items]
    return jsonify({"records": data, "pagination": make_pagination(page, size, total)}), 200


@health_bp.route("/<int:rec_id>", methods=["GET"])
@jwt_required()
def get_record(rec_id: int):
    user_id = get_jwt_identity()
    rec = manager.get(user_id=user_id, rec_id=rec_id)
    if not rec:
        return jsonify(error("404", "Record not found")), 404
    return jsonify({
        "id": rec.id,
        "systolic": rec.systolic,
        "diastolic": rec.diastolic,
        "heart_rate": rec.heart_rate,
    "timestamp": rec.timestamp.isoformat().replace("+00:00", "Z"),
        "tags": json.loads(rec.tags) if rec.tags else [],
        "note": rec.note,
    "created_at": rec.created_at.isoformat().replace("+00:00", "Z"),
    }), 200


@health_bp.route("/<int:rec_id>", methods=["PUT"])
@jwt_required()
def update_record(rec_id: int):
    user_id = get_jwt_identity()
    rec = manager.get(user_id=user_id, rec_id=rec_id)
    if not rec:
        return jsonify(error("404", "Record not found")), 404
    data = request.get_json(force=True) or {}
    if "systolic" in data:
        try:
            rec.systolic = int(data["systolic"])
        except (TypeError, ValueError):
            return jsonify(error("400", "Invalid systolic")), 400
        if not (50 <= rec.systolic <= 250):
            return jsonify(error("422", "Blood pressure out of range (50-250)")), 422
    if "diastolic" in data:
        try:
            rec.diastolic = int(data["diastolic"])
        except (TypeError, ValueError):
            return jsonify(error("400", "Invalid diastolic")), 400
        if not (50 <= rec.diastolic <= 250):
            return jsonify(error("422", "Blood pressure out of range (50-250)")), 422
    if "heart_rate" in data:
        try:
            rec.heart_rate = int(data["heart_rate"])
        except (TypeError, ValueError):
            return jsonify(error("400", "Invalid heart_rate")), 400
    if "tags" in data:
        tags = data.get("tags") or []
        if not isinstance(tags, list):
            return jsonify(error("400", "tags must be a list")), 400
        rec.tags = json.dumps(tags)
    if "note" in data:
        rec.note = data.get("note")
    manager.update(rec)
    return jsonify({
        "id": rec.id,
        "systolic": rec.systolic,
        "diastolic": rec.diastolic,
        "heart_rate": rec.heart_rate,
        "tags": json.loads(rec.tags) if rec.tags else [],
        "note": rec.note,
        # Timezone-aware UTC now, serialized with trailing 'Z'
        "updated_at": datetime.now(UTC).isoformat().replace("+00:00", "Z"),
    }), 200


@health_bp.route("/<int:rec_id>", methods=["DELETE"])
@jwt_required()
def delete_record(rec_id: int):
    user_id = get_jwt_identity()
    rec = manager.get(user_id=user_id, rec_id=rec_id)
    if not rec:
        return jsonify(error("404", "Record not found")), 404
    manager.delete(rec)
    return jsonify({"message": "Record deleted successfully."}), 200
