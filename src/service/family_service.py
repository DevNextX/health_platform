"""
Family member service endpoints. Generated by Zhuang
"""
from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from ..manager.family_manager import FamilyMemberManager
from ..utils import error

family_bp = Blueprint("family", __name__)
manager = FamilyMemberManager()


@family_bp.route("", methods=["GET"])
@jwt_required()
def list_members():
    user_id = get_jwt_identity()
    
    # Ensure user has a default "Self" member
    manager.ensure_self_member(user_id)
    
    members = manager.list(user_id)
    data = [{
        "id": m.id,
        "name": m.name,
        "gender": m.gender,
        "age": m.age,
        "height": m.height,
        "weight": m.weight,
        "is_self": m.is_self,
        "created_at": m.created_at.isoformat().replace("+00:00", "Z"),
    } for m in members]
    return jsonify({"members": data}), 200


@family_bp.route("", methods=["POST"])
@jwt_required()
def create_member():
    user_id = get_jwt_identity()
    data = request.get_json(force=True) or {}
    
    name = data.get("name", "").strip()
    if not name:
        return jsonify(error("400", "Name is required")), 400
    
    gender = data.get("gender")
    age = data.get("age")
    height = data.get("height")
    weight = data.get("weight")
    
    # Validate optional numeric fields
    if age is not None:
        try:
            age = int(age)
            if age < 0 or age > 150:
                return jsonify(error("400", "Age must be between 0 and 150")), 400
        except (TypeError, ValueError):
            return jsonify(error("400", "Invalid age")), 400
    
    if height is not None:
        try:
            height = float(height)
            if height < 0 or height > 300:
                return jsonify(error("400", "Height must be between 0 and 300 cm")), 400
        except (TypeError, ValueError):
            return jsonify(error("400", "Invalid height")), 400
    
    if weight is not None:
        try:
            weight = float(weight)
            if weight < 0 or weight > 500:
                return jsonify(error("400", "Weight must be between 0 and 500 kg")), 400
        except (TypeError, ValueError):
            return jsonify(error("400", "Invalid weight")), 400
    
    member = manager.create(
        user_id=user_id,
        name=name,
        gender=gender,
        age=age,
        height=height,
        weight=weight
    )
    
    return jsonify({
        "id": member.id,
        "name": member.name,
        "gender": member.gender,
        "age": member.age,
        "height": member.height,
        "weight": member.weight,
        "is_self": member.is_self,
        "created_at": member.created_at.isoformat().replace("+00:00", "Z"),
    }), 201


@family_bp.route("/<int:member_id>", methods=["GET"])
@jwt_required()
def get_member(member_id: int):
    user_id = get_jwt_identity()
    member = manager.get(user_id, member_id)
    if not member:
        return jsonify(error("404", "Family member not found")), 404
    
    return jsonify({
        "id": member.id,
        "name": member.name,
        "gender": member.gender,
        "age": member.age,
        "height": member.height,
        "weight": member.weight,
        "is_self": member.is_self,
        "created_at": member.created_at.isoformat().replace("+00:00", "Z"),
    }), 200


@family_bp.route("/<int:member_id>", methods=["PUT"])
@jwt_required()
def update_member(member_id: int):
    user_id = get_jwt_identity()
    member = manager.get(user_id, member_id)
    if not member:
        return jsonify(error("404", "Family member not found")), 404
    
    data = request.get_json(force=True) or {}
    update_fields = {}
    
    if "name" in data:
        name = data["name"].strip()
        if not name:
            return jsonify(error("400", "Name cannot be empty")), 400
        update_fields["name"] = name
    
    if "gender" in data:
        update_fields["gender"] = data["gender"]
    
    if "age" in data:
        age = data["age"]
        if age is not None:
            try:
                age = int(age)
                if age < 0 or age > 150:
                    return jsonify(error("400", "Age must be between 0 and 150")), 400
            except (TypeError, ValueError):
                return jsonify(error("400", "Invalid age")), 400
        update_fields["age"] = age
    
    if "height" in data:
        height = data["height"]
        if height is not None:
            try:
                height = float(height)
                if height < 0 or height > 300:
                    return jsonify(error("400", "Height must be between 0 and 300 cm")), 400
            except (TypeError, ValueError):
                return jsonify(error("400", "Invalid height")), 400
        update_fields["height"] = height
    
    if "weight" in data:
        weight = data["weight"]
        if weight is not None:
            try:
                weight = float(weight)
                if weight < 0 or weight > 500:
                    return jsonify(error("400", "Weight must be between 0 and 500 kg")), 400
            except (TypeError, ValueError):
                return jsonify(error("400", "Invalid weight")), 400
        update_fields["weight"] = weight
    
    updated_member = manager.update(member, **update_fields)
    
    return jsonify({
        "id": updated_member.id,
        "name": updated_member.name,
        "gender": updated_member.gender,
        "age": updated_member.age,
        "height": updated_member.height,
        "weight": updated_member.weight,
        "is_self": updated_member.is_self,
    }), 200


@family_bp.route("/<int:member_id>", methods=["DELETE"])
@jwt_required()
def delete_member(member_id: int):
    user_id = get_jwt_identity()
    member = manager.get(user_id, member_id)
    if not member:
        return jsonify(error("404", "Family member not found")), 404
    
    # Prevent deletion of Self member
    if member.is_self:
        return jsonify(error("400", "Cannot delete the Self member")), 400
    
    manager.soft_delete(member)
    return jsonify({"message": "Family member deleted successfully."}), 200