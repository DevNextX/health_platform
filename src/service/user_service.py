"""
User service endpoints. Generated by Zhuang
"""
from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from ..manager.user_manager import UserManager
from ..manager.member_manager import MemberManager
from ..utils import error

user_bp = Blueprint("user", __name__)
user_manager = UserManager()
member_manager = MemberManager()


@user_bp.route("", methods=["POST"])
def register_user_via_user_endpoint():
    # For compatibility with API_Design.md (POST /api/user)
    from .auth_service import register  # reuse implementation
    return register()


@user_bp.route("/<int:user_id>", methods=["GET"])
@jwt_required()
def get_user_info(user_id: int):
    identity = get_jwt_identity()
    if identity != user_id:
        return jsonify(error("403", "Forbidden")), 403
    user = user_manager.get_user(user_id)
    if not user:
        return jsonify(error("404", "User not found")), 404
    # Generated by Zhuang: also include height from the default 'Self' member for display in Profile
    self_member = member_manager.get_or_create_self_member(user_id)
    height = self_member.height if self_member else None
    return jsonify({
        "id": user.id,
        "username": user.username,
        "email": user.email,
        "age": user.age,
        "gender": user.gender,
        "height": height,
        "weight": user.weight,
    }), 200


@user_bp.route("/<int:user_id>", methods=["PUT"])
@jwt_required()
def update_user_info(user_id: int):
    identity = get_jwt_identity()
    if identity != user_id:
        return jsonify(error("403", "Forbidden")), 403
    user = user_manager.get_user(user_id)
    if not user:
        return jsonify(error("404", "User not found")), 404
    data = request.get_json(force=True) or {}
    user = user_manager.update_user(
        user,
        username=data.get("username"),
        age=data.get("age"),
        gender=data.get("gender"),
        weight=data.get("weight"),
    )
    # Generated by Zhuang: If height provided, sync it to the 'Self' member's height (no DB schema change)
    if "height" in data:
        try:
            self_member = member_manager.get_or_create_self_member(user_id)
            member_manager.update_member(self_member, height=data.get("height"))
        except Exception:
            # Best-effort: ignore height sync failures so profile update still succeeds
            pass
    # Return height from Self member for UI consistency
    self_member = member_manager.get_or_create_self_member(user_id)
    height = self_member.height if self_member else None
    return jsonify({
        "id": user.id,
        "username": user.username,
        "email": user.email,
        "age": user.age,
        "gender": user.gender,
        "height": height,
        "weight": user.weight,
        "updated_at": user.updated_at.isoformat() + "Z",
    }), 200
