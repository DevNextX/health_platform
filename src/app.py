"""
Entry point for the Health Platform backend API. Generated by Zhuang
"""
from flask import Flask, jsonify
from .config import Config
from .extensions import db, jwt, limiter, cors
from .service.auth_service import auth_bp
from .service.user_service import user_bp
from .service.health_service import health_bp
from .service.member_service import member_bp
from .errors import register_error_handlers


def create_app(config_class: type = Config) -> Flask:
    app = Flask(__name__)
    app.config.from_object(config_class)

    # Init extensions
    db.init_app(app)
    jwt.init_app(app)
    limiter.init_app(app)
    # Generated by Zhuang: CORS relaxed for local dev and export download
    cors.init_app(app, resources={
        r"/api/*": {
            "origins": app.config.get("CORS_ORIGINS"),
            # Allow common headers incl. lowercase 'authorization' to satisfy some browsers' preflight
            "allow_headers": [
                "Authorization",
                "authorization",
                "Content-Type",
                "X-Requested-With"
            ],
            # Expose filename for CSV download
            "expose_headers": ["Content-Disposition"],
            # Explicitly allow OPTIONS for preflight
            "methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
            # Allow credentials if the client opts in (cookies/authorization)
            "supports_credentials": True,
        }
    })

    with app.app_context():
        db.create_all()

    # Register blueprints (service layer)
    app.register_blueprint(auth_bp, url_prefix="/api/v1/auth")
    app.register_blueprint(user_bp, url_prefix="/api/v1/user")
    app.register_blueprint(health_bp, url_prefix="/api/v1/health")
    app.register_blueprint(member_bp, url_prefix="/api/v1/members")

    # Errors
    register_error_handlers(app)

    @app.route("/healthz")
    def healthz():
        return jsonify({"status": "ok"})

    # Generated by Zhuang: avoid proxy noise in dev when browser requests /favicon.ico
    @app.route("/favicon.ico")
    def favicon():
        return "", 204

    @app.route("/favicon.svg")
    def favicon_svg():
        return "", 204

    return app


if __name__ == "__main__":
    # For local debug only
    app = create_app()
    app.run(host="0.0.0.0", port=5000)
