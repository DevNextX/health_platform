"""
Entry point for the Health Platform backend API. Generated by Zhuang
"""
from flask import Flask, jsonify
import os  # Generated by Zhuang
from sqlalchemy.engine import make_url  # Generated by Zhuang
from sqlalchemy import text, inspect  # Generated by Zhuang
from .config import Config
from .extensions import db, jwt, limiter, cors
from .service.auth_service import auth_bp
from .service.user_service import user_bp
from .service.health_service import health_bp
from .service.member_service import member_bp
from .errors import register_error_handlers


def create_app(config_class: type = Config) -> Flask:
    app = Flask(__name__)
    app.config.from_object(config_class)

    # Generated by Zhuang: ensure SQLite path is absolute and directory exists
    try:
        uri = app.config.get("SQLALCHEMY_DATABASE_URI")
        if uri:
            url = make_url(uri)
            if url.get_backend_name() == "sqlite":
                db_path = url.database
                if db_path and db_path != ":memory:":
                    # if relative, resolve against project root (app.root_path)
                    if not os.path.isabs(db_path):
                        abs_path = os.path.normpath(os.path.join(app.root_path, db_path))
                    else:
                        abs_path = db_path
                    os.makedirs(os.path.dirname(abs_path), exist_ok=True)
                    # rebuild absolute file URI (use forward slashes on Windows)
                    abs_uri = "sqlite:///" + abs_path.replace("\\", "/")
                    app.config["SQLALCHEMY_DATABASE_URI"] = abs_uri
    except Exception:
        # Non-fatal safeguard; continue initialization
        pass

    # Init extensions
    db.init_app(app)
    jwt.init_app(app)
    limiter.init_app(app)
    # Generated by Zhuang: CORS relaxed for local dev and export download
    cors.init_app(app, resources={
        r"/api/*": {
            "origins": app.config.get("CORS_ORIGINS"),
            # Allow common headers incl. lowercase 'authorization' to satisfy some browsers' preflight
            "allow_headers": [
                "Authorization",
                "authorization",
                "Content-Type",
                "X-Requested-With"
            ],
            # Expose filename for CSV download
            "expose_headers": ["Content-Disposition"],
            # Explicitly allow OPTIONS for preflight
            "methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
            # Allow credentials if the client opts in (cookies/authorization)
            "supports_credentials": True,
        }
    })

    with app.app_context():
        db.create_all()

    # Register blueprints (service layer)
    app.register_blueprint(auth_bp, url_prefix="/api/v1/auth")
    app.register_blueprint(user_bp, url_prefix="/api/v1/user")
    app.register_blueprint(health_bp, url_prefix="/api/v1/health")
    app.register_blueprint(member_bp, url_prefix="/api/v1/members")

    # Errors
    register_error_handlers(app)

    @app.route("/healthz")
    def healthz():
        return jsonify({"status": "ok"})

    # Generated by Zhuang: CLI - db-info
    @app.cli.command("db-info")
    def db_info():
        """Print DB dialect, server/client encodings, and table list. Generated by Zhuang"""
        eng = db.engine
        insp = inspect(eng)
        print("URL      :", eng.url)
        print("Dialect  :", eng.dialect.name)
        # server encoding / collation best effort
        server_info = None
        try:
            if eng.dialect.name == "sqlite":
                server_info = db.session.execute(text("PRAGMA encoding")).scalar()
            elif eng.dialect.name == "mysql":
                cs = db.session.execute(text("SHOW VARIABLES LIKE 'character_set_database'"))
                coll = db.session.execute(text("SHOW VARIABLES LIKE 'collation_database'"))
                cs_map = {k: v for k, v in cs}
                coll_map = {k: v for k, v in coll}
                server_info = f"{cs_map.get('character_set_database')}, {coll_map.get('collation_database')}"
            elif eng.dialect.name in ("mssql", "pyodbc"):
                server_info = db.session.execute(text("SELECT CONVERT(sysname, DATABASEPROPERTYEX(DB_NAME(), 'Collation'))")).scalar()
        except Exception as e:
            server_info = f"n/a ({e})"
        print("Encoding :", getattr(eng.dialect, 'encoding', 'utf-8'))
        print("Server   :", server_info or "n/a")
        tables = insp.get_table_names()
        print("Tables   :", ", ".join(tables) if tables else "(none)")

    # Generated by Zhuang: avoid proxy noise in dev when browser requests /favicon.ico
    @app.route("/favicon.ico")
    def favicon():
        return "", 204

    @app.route("/favicon.svg")
    def favicon_svg():
        return "", 204

    return app


if __name__ == "__main__":
    # For local debug only
    app = create_app()
    app.run(host="0.0.0.0", port=5000)
