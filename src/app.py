"""
Entry point for the Health Platform backend API. Generated by Zhuang
"""
from flask import Flask, jsonify
from flask.cli import with_appcontext  # Generated by Zhuang
import os  # Generated by Zhuang
from sqlalchemy.engine import make_url  # Generated by Zhuang
from sqlalchemy import text, inspect  # Generated by Zhuang
from .config import Config
from .extensions import db, jwt, limiter, cors
from .service.auth_service import auth_bp
from .service.user_service import user_bp
from .service.health_service import health_bp
from .service.member_service import member_bp
from .errors import register_error_handlers


def create_app(config_class: type = Config) -> Flask:
    app = Flask(__name__)
    app.config.from_object(config_class)

    # Generated by Zhuang: ensure SQLite path is absolute and directory exists
    try:
        uri = app.config.get("SQLALCHEMY_DATABASE_URI")
        if uri:
            url = make_url(uri)
            if url.get_backend_name() == "sqlite":
                db_path = url.database
                if db_path and db_path != ":memory:":
                    # if relative, resolve against project root (app.root_path)
                    if not os.path.isabs(db_path):
                        abs_path = os.path.normpath(os.path.join(app.root_path, db_path))
                    else:
                        abs_path = db_path
                    os.makedirs(os.path.dirname(abs_path), exist_ok=True)
                    # rebuild absolute file URI (use forward slashes on Windows)
                    abs_uri = "sqlite:///" + abs_path.replace("\\", "/")
                    app.config["SQLALCHEMY_DATABASE_URI"] = abs_uri
    except Exception:
        # Non-fatal safeguard; continue initialization
        pass

    # MySQL engine robustness + optional TLS. Generated by Zhuang
    try:
        uri_eff = app.config.get("SQLALCHEMY_DATABASE_URI")
        if uri_eff:
            url_eff = make_url(uri_eff)
            if url_eff.get_backend_name() in ("mysql", "mariadb"):
                eng_opts = dict(app.config.get("SQLALCHEMY_ENGINE_OPTIONS", {}))
                # Avoid stale connections and NAT timeouts
                eng_opts.setdefault("pool_pre_ping", True)
                eng_opts.setdefault("pool_recycle", int(os.getenv("DB_POOL_RECYCLE", "280")))
                # Optional TLS for Azure MySQL. MYSQL_SSL=1 to enable; MYSQL_SSL_CA to specify CA file
                if os.getenv("MYSQL_SSL", "").lower() in ("1", "true", "yes"):
                    ca = os.getenv("MYSQL_SSL_CA")
                    if ca:
                        eng_opts.setdefault("connect_args", {}).setdefault("ssl", {"ca": ca})
                    else:
                        # Enable TLS without custom CA (server-provided); not verifying CA strictly
                        eng_opts.setdefault("connect_args", {}).setdefault("ssl", {})
                app.config["SQLALCHEMY_ENGINE_OPTIONS"] = eng_opts
    except Exception:
        pass

    # Init extensions
    db.init_app(app)
    jwt.init_app(app)
    limiter.init_app(app)
    # Generated by Zhuang: CORS relaxed for local dev and export download
    cors.init_app(app, resources={
        r"/api/*": {
            "origins": app.config.get("CORS_ORIGINS"),
            # Allow common headers incl. lowercase 'authorization' to satisfy some browsers' preflight
            "allow_headers": [
                "Authorization",
                "authorization",
                "Content-Type",
                "X-Requested-With"
            ],
            # Expose filename for CSV download
            "expose_headers": ["Content-Disposition"],
            # Explicitly allow OPTIONS for preflight
            "methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
            # Allow credentials if the client opts in (cookies/authorization)
            "supports_credentials": True,
        }
    })

    with app.app_context():
        # Generated by Zhuang: Avoid startup hang if external DB is unreachable.
        # Create tables automatically in safe scenarios:
        # - Always for SQLite (dev convenience)
        # - For external DBs (e.g., MySQL) when key tables are missing, or when DB_AUTO_CREATE=1
        # Can be disabled with DB_AUTO_CREATE=0 or DB_CREATE_ON_MISSING=0
        try:
            uri = app.config.get("SQLALCHEMY_DATABASE_URI")
            backend = make_url(uri).get_backend_name() if uri else None
            # Best-effort connectivity probe first
            try:
                db.session.execute(text("SELECT 1"))
            except Exception:
                pass

            should_create = False
            if backend == "sqlite":
                should_create = True
            else:
                # External DBs: allow opt-in via env, or auto if required app tables are missing
                auto_env = os.getenv("DB_AUTO_CREATE", "").lower() in ("1", "true", "yes")
                on_missing_env = os.getenv("DB_CREATE_ON_MISSING", "1").lower() in ("1", "true", "yes")
                if auto_env:
                    should_create = True
                elif on_missing_env:
                    try:
                        insp = inspect(db.engine)
                        existing = set(insp.get_table_names())
                        required = {"users", "members", "health_records", "households", "record_subjects"}
                        if not required.issubset(existing):
                            should_create = True
                    except Exception:
                        # If inspection fails, do not block startup; skip create to be safe
                        pass

            if should_create:
                try:
                    db.create_all()
                except Exception:
                    # Do not crash the app due to DDL issues; surface via logs and continue
                    pass
        except Exception:
            pass

    # Register blueprints (service layer)
    app.register_blueprint(auth_bp, url_prefix="/api/v1/auth")
    app.register_blueprint(user_bp, url_prefix="/api/v1/user")
    app.register_blueprint(health_bp, url_prefix="/api/v1/health")
    app.register_blueprint(member_bp, url_prefix="/api/v1/members")

    # Errors
    register_error_handlers(app)

    @app.route("/healthz")
    def healthz():
        return jsonify({"status": "ok"})

    # Generated by Zhuang: CLI - db-info
    @app.cli.command("db-info")
    def db_info():
        """Print DB dialect, server/client encodings, and table list. Generated by Zhuang"""
        eng = db.engine
        insp = inspect(eng)
        print("URL      :", eng.url)
        print("Dialect  :", eng.dialect.name)
        # server encoding / collation best effort
        server_info = None
        try:
            if eng.dialect.name == "sqlite":
                server_info = db.session.execute(text("PRAGMA encoding")).scalar()
            elif eng.dialect.name == "mysql":
                cs = db.session.execute(text("SHOW VARIABLES LIKE 'character_set_database'"))
                coll = db.session.execute(text("SHOW VARIABLES LIKE 'collation_database'"))
                cs_map = {k: v for k, v in cs}
                coll_map = {k: v for k, v in coll}
                server_info = f"{cs_map.get('character_set_database')}, {coll_map.get('collation_database')}"
            elif eng.dialect.name in ("mssql", "pyodbc"):
                server_info = db.session.execute(text("SELECT CONVERT(sysname, DATABASEPROPERTYEX(DB_NAME(), 'Collation'))")).scalar()
        except Exception as e:
            server_info = f"n/a ({e})"
        print("Encoding :", getattr(eng.dialect, 'encoding', 'utf-8'))
        print("Server   :", server_info or "n/a")
        tables = insp.get_table_names()
        print("Tables   :", ", ".join(tables) if tables else "(none)")

    # Generated by Zhuang: CLI - db-create (create all tables explicitly for non-SQLite DBs)
    @app.cli.command("db-create")
    @with_appcontext
    def db_create():
        """Create all database tables using SQLAlchemy metadata. Generated by Zhuang"""
        db.create_all()
        insp = inspect(db.engine)
        tables = insp.get_table_names()
        print(f"Created tables: {', '.join(tables) if tables else '(none)'}")

    # Generated by Zhuang: avoid proxy noise in dev when browser requests /favicon.ico
    @app.route("/favicon.ico")
    def favicon():
        return "", 204

    @app.route("/favicon.svg")
    def favicon_svg():
        return "", 204

    return app


if __name__ == "__main__":
    # For local debug only
    app = create_app()
    app.run(host="0.0.0.0", port=5000)
