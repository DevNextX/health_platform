"""
Entry point for the Health Platform backend API. Generated by Zhuang
"""
import os
from flask import Flask, jsonify
from .config import config
from .extensions import db, jwt, limiter, cors
from .service.auth_service import auth_bp
from .service.user_service import user_bp
from .service.health_service import health_bp
from .errors import register_error_handlers


def create_app(config_name=None) -> Flask:
    if config_name is None:
        config_name = os.getenv('FLASK_ENV', 'default')
    
    app = Flask(__name__)
    
    # Handle both string config names and config classes
    if isinstance(config_name, str):
        app.config.from_object(config[config_name])
    else:
        app.config.from_object(config_name)

    # Init extensions
    db.init_app(app)
    jwt.init_app(app)
    limiter.init_app(app)
    cors.init_app(app, resources={r"/api/*": {"origins": app.config.get("CORS_ORIGINS")}})

    with app.app_context():
        db.create_all()

    # Add security headers
    @app.after_request
    def after_request(response):
        for header, value in app.config.get("SECURITY_HEADERS", {}).items():
            response.headers[header] = value
        return response

    # Register blueprints (service layer)
    app.register_blueprint(auth_bp, url_prefix="/api/v1/auth")
    app.register_blueprint(user_bp, url_prefix="/api/v1/user")
    app.register_blueprint(health_bp, url_prefix="/api/v1/health")

    # Errors
    register_error_handlers(app)

    @app.route("/healthz")
    def healthz():
        return jsonify({"status": "ok", "version": "1.0.0"})

    return app


if __name__ == "__main__":
    # For local debug only
    app = create_app()
    app.run(host="0.0.0.0", port=5000)
